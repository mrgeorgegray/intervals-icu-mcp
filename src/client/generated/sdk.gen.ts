// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  DeleteSharedEventData,
  DeleteSharedEventResponses,
  GetSharedEventData,
  GetSharedEventResponses,
  UpdateSharedEventData,
  UpdateSharedEventResponses,
  DeleteWorkoutData,
  DeleteWorkoutResponses,
  ShowWorkoutData,
  ShowWorkoutResponses,
  UpdateWorkoutData,
  UpdateWorkoutResponses,
  GetRecordData,
  GetRecordResponses,
  UpdateWellnessData,
  UpdateWellnessResponses,
  UpdateWellnessBulkData,
  UpdateWellnessBulkResponses,
  UploadWellnessData,
  UploadWellnessResponses,
  UpdateWellness1Data,
  UpdateWellness1Responses,
  GetWeatherConfigData,
  GetWeatherConfigResponses,
  UpdateWeatherConfigData,
  UpdateWeatherConfigResponses,
  GetAthleteTrainingPlanData,
  GetAthleteTrainingPlanResponses,
  UpdateAthletePlanData,
  UpdateAthletePlanResponses,
  GetAthleteRouteData,
  GetAthleteRouteResponses,
  UpdateAthleteRouteData,
  UpdateAthleteRouteResponses,
  DeleteReminderData,
  DeleteReminderResponses,
  UpdateReminderData,
  UpdateReminderResponses,
  DeleteGearData,
  DeleteGearResponses,
  UpdateGearData,
  UpdateGearResponses,
  UpdatePlanWorkoutsData,
  UpdatePlanWorkoutsResponses,
  ListFolderSharedWithData,
  ListFolderSharedWithResponses,
  UpdateFolderSharedWithData,
  UpdateFolderSharedWithResponses,
  DeleteFolderData,
  DeleteFolderResponses,
  UpdateFolderData,
  UpdateFolderResponses,
  DeleteEventData,
  DeleteEventResponses,
  ShowEventData,
  ShowEventResponses,
  UpdateEventData,
  UpdateEventResponses,
  DeleteEventsBulkData,
  DeleteEventsBulkResponses,
  DeleteEventsData,
  DeleteEventsResponses,
  CreateEventData,
  CreateEventResponses,
  UpdateEventsData,
  UpdateEventsResponses,
  DeleteCustomItemData,
  DeleteCustomItemResponses,
  GetCustomItemData,
  GetCustomItemResponses,
  UpdateCustomItemData,
  UpdateCustomItemResponses,
  UpdateCustomItemIndexesData,
  UpdateCustomItemIndexesResponses,
  ApplyCurrentPlanChangesData,
  ApplyCurrentPlanChangesResponses,
  GetAthleteData,
  GetAthleteResponses,
  UpdateAthleteData,
  UpdateAthleteResponses,
  ApplyToActivitiesData,
  ApplyToActivitiesResponses,
  DeleteSettingsData,
  DeleteSettingsResponses,
  GetSettings1Data,
  GetSettings1Responses,
  UpdateSettingsData,
  UpdateSettingsResponses,
  ListSettingsData,
  ListSettingsResponses,
  CreateSettingsData,
  CreateSettingsResponses,
  UpdateSettingsMultiData,
  UpdateSettingsMultiResponses,
  UpdateAthletePlansData,
  UpdateAthletePlansResponses,
  SplitIntervalData,
  SplitIntervalResponses,
  UpdateIntervalData,
  UpdateIntervalResponses,
  GetIntervalsData,
  GetIntervalsResponses,
  UpdateIntervalsData,
  UpdateIntervalsResponses,
  DeleteIntervalsData,
  DeleteIntervalsResponses,
  DeleteActivityData,
  DeleteActivityResponses,
  GetActivityData,
  GetActivityResponses,
  UpdateActivityData,
  UpdateActivityResponses,
  CreateSharedEventData,
  CreateSharedEventResponses,
  DownloadWorkoutData,
  DownloadWorkoutResponses,
  CreateMultipleWorkoutsData,
  CreateMultipleWorkoutsResponses,
  ListWorkoutsData,
  ListWorkoutsResponses,
  CreateWorkoutData,
  CreateWorkoutResponses,
  ReplaceGearData,
  ReplaceGearResponses,
  CreateReminderData,
  CreateReminderResponses,
  CreateGearData,
  CreateGearResponses,
  ImportWorkoutFileData,
  ImportWorkoutFileResponses,
  ListFoldersData,
  ListFoldersResponses,
  CreateFolderData,
  CreateFolderResponses,
  MarkEventAsDoneData,
  MarkEventAsDoneResponses,
  CreateMultipleEventsData,
  CreateMultipleEventsResponses,
  DuplicateWorkoutsData,
  DuplicateWorkoutsResponses,
  DuplicateEventsData,
  DuplicateEventsResponses,
  DownloadWorkoutForAthleteData,
  DownloadWorkoutForAthleteResponses,
  DownloadActivityFitFilesData,
  DownloadActivityFitFilesResponses,
  UpdateCustomItemImageData,
  UpdateCustomItemImageResponses,
  ListCustomItemsData,
  ListCustomItemsResponses,
  CreateCustomItemData,
  CreateCustomItemResponses,
  CreateManualActivityData,
  CreateManualActivityResponses,
  ListActivitiesData,
  ListActivitiesResponses,
  UploadActivityData,
  UploadActivityResponses,
  ListActivityMessagesData,
  ListActivityMessagesResponses,
  SendActivityMessageData,
  SendActivityMessageResponses,
  ListPaceDistancesData,
  ListPaceDistancesResponses,
  DownloadWorkoutsData,
  DownloadWorkoutsResponses,
  ListTagsData,
  ListTagsResponses,
  ListWellnessRecordsData,
  ListWellnessRecordsResponses,
  GetForecastData,
  GetForecastResponses,
  GetSettingsData,
  GetSettingsResponses,
  CheckMergeData,
  CheckMergeResponses,
  ListAthleteRoutesData,
  ListAthleteRoutesResponses,
  GetAthleteProfileData,
  GetAthleteProfileResponses,
  GetPowerHrCurveData,
  GetPowerHrCurveResponses,
  ListAthletePowerCurvesData,
  ListAthletePowerCurvesResponses,
  ListAthletePaceCurvesData,
  ListAthletePaceCurvesResponses,
  GetAthleteMmpModelData,
  GetAthleteMmpModelResponses,
  ListAthleteHrCurvesData,
  ListAthleteHrCurvesResponses,
  ListGearData,
  ListGearResponses,
  CalcDistanceEtcData,
  CalcDistanceEtcResponses,
  ListFitnessModelEventsData,
  ListFitnessModelEventsResponses,
  DownloadWorkout1Data,
  DownloadWorkout1Responses,
  ListTags1Data,
  ListTags1Responses,
  GetAthleteSummaryData,
  GetAthleteSummaryResponses,
  ListTags2Data,
  ListTags2Responses,
  ListActivityPowerCurvesData,
  ListActivityPowerCurvesResponses,
  ListActivityPaceCurvesData,
  ListActivityPaceCurvesResponses,
  ListActivityHrCurvesData,
  ListActivityHrCurvesResponses,
  SearchForActivitiesFullData,
  SearchForActivitiesFullResponses,
  SearchForActivitiesData,
  SearchForActivitiesResponses,
  SearchForIntervalsData,
  SearchForIntervalsResponses,
  DownloadActivitiesAsCsvData,
  DownloadActivitiesAsCsvResponses,
  ListActivitiesAroundData,
  ListActivitiesAroundResponses,
  ListPaceDistancesForSportData,
  ListPaceDistancesForSportResponses,
  ListMatchingActivitiesData,
  ListMatchingActivitiesResponses,
  GetActivitiesData,
  GetActivitiesResponses,
  GetActivityWeatherSummaryData,
  GetActivityWeatherSummaryResponses,
  GetTimeAtHrData,
  GetTimeAtHrResponses,
  GetActivityStreamsData,
  GetActivityStreamsResponses,
  GetActivitySegmentsData,
  GetActivitySegmentsResponses,
  GetPowerVsHrData,
  GetPowerVsHrResponses,
  GetActivityPowerSpikeModelData,
  GetActivityPowerSpikeModelResponses,
  GetPowerHistogramData,
  GetPowerHistogramResponses,
  GetActivityPowerCurveData,
  GetActivityPowerCurveResponses,
  ListActivityPowerCurves1Data,
  ListActivityPowerCurves1Responses,
  GetPaceHistogramData,
  GetPaceHistogramResponses,
  GetActivityPaceCurveData,
  GetActivityPaceCurveResponses,
  GetActivityMapData,
  GetActivityMapResponses,
  GetIntervalStatsData,
  GetIntervalStatsResponses,
  GetHrTrainingLoadModelData,
  GetHrTrainingLoadModelResponses,
  GetHrHistogramData,
  GetHrHistogramResponses,
  GetActivityHrCurveData,
  GetActivityHrCurveResponses,
  DownloadActivityGpxFileData,
  DownloadActivityGpxFileResponses,
  GetGapHistogramData,
  GetGapHistogramResponses,
  DownloadActivityFitFileData,
  DownloadActivityFitFileResponses,
  DownloadActivityFileData,
  DownloadActivityFileResponses,
  FindBestEffortsData,
  FindBestEffortsResponses,
  ListEventsData,
  ListEventsResponses,
  DisconnectAppData,
  DisconnectAppResponses,
  DisconnectAppErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  showWorkoutResponseTransformer,
  updateWorkoutResponseTransformer,
  getRecordResponseTransformer,
  updateWellnessResponseTransformer,
  updateWellness1ResponseTransformer,
  getAthleteTrainingPlanResponseTransformer,
  updateAthletePlanResponseTransformer,
  getAthleteRouteResponseTransformer,
  updateAthleteRouteResponseTransformer,
  deleteReminderResponseTransformer,
  updateReminderResponseTransformer,
  updateGearResponseTransformer,
  updatePlanWorkoutsResponseTransformer,
  updateFolderResponseTransformer,
  showEventResponseTransformer,
  updateEventResponseTransformer,
  createEventResponseTransformer,
  updateEventsResponseTransformer,
  getCustomItemResponseTransformer,
  updateCustomItemResponseTransformer,
  getAthleteResponseTransformer,
  updateAthleteResponseTransformer,
  getSettings1ResponseTransformer,
  updateSettingsResponseTransformer,
  listSettingsResponseTransformer,
  createSettingsResponseTransformer,
  updateSettingsMultiResponseTransformer,
  splitIntervalResponseTransformer,
  updateIntervalResponseTransformer,
  getIntervalsResponseTransformer,
  updateIntervalsResponseTransformer,
  deleteIntervalsResponseTransformer,
  updateActivityResponseTransformer,
  createMultipleWorkoutsResponseTransformer,
  listWorkoutsResponseTransformer,
  createWorkoutResponseTransformer,
  replaceGearResponseTransformer,
  createReminderResponseTransformer,
  createGearResponseTransformer,
  importWorkoutFileResponseTransformer,
  listFoldersResponseTransformer,
  createFolderResponseTransformer,
  markEventAsDoneResponseTransformer,
  createMultipleEventsResponseTransformer,
  duplicateWorkoutsResponseTransformer,
  duplicateEventsResponseTransformer,
  updateCustomItemImageResponseTransformer,
  listCustomItemsResponseTransformer,
  createCustomItemResponseTransformer,
  createManualActivityResponseTransformer,
  listActivitiesResponseTransformer,
  listActivityMessagesResponseTransformer,
  sendActivityMessageResponseTransformer,
  listWellnessRecordsResponseTransformer,
  checkMergeResponseTransformer,
  listAthleteRoutesResponseTransformer,
  getAthleteProfileResponseTransformer,
  listGearResponseTransformer,
  listFitnessModelEventsResponseTransformer,
  searchForActivitiesFullResponseTransformer,
  searchForIntervalsResponseTransformer,
  listActivitiesAroundResponseTransformer,
  getActivitiesResponseTransformer,
  getActivitySegmentsResponseTransformer,
  getActivityMapResponseTransformer,
  getIntervalStatsResponseTransformer,
  listEventsResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Delete a shared event (e.g. race)
 */
export const deleteSharedEvent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSharedEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSharedEventResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/shared-event/{id}",
    ...options,
  });
};

/**
 * Get a shared event (e.g. race)
 */
export const getSharedEvent = <ThrowOnError extends boolean = false>(
  options: Options<GetSharedEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSharedEventResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/shared-event/{id}",
    ...options,
  });
};

/**
 * Update a shared event (e.g. race)
 */
export const updateSharedEvent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSharedEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateSharedEventResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/shared-event/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a workout (and optionally others added at the same time if the workout is on a plan)
 * Returns the ids of the deleted workout(s)
 */
export const deleteWorkout = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWorkoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWorkoutResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts/{workoutId}",
    ...options,
  });
};

/**
 * Get a workout
 */
export const showWorkout = <ThrowOnError extends boolean = false>(
  options: Options<ShowWorkoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowWorkoutResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: showWorkoutResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts/{workoutId}",
    ...options,
  });
};

/**
 * Update a workout
 */
export const updateWorkout = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWorkoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWorkoutResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateWorkoutResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts/{workoutId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get wellness record for date (local ISO-8601 day)
 */
export const getRecord = <ThrowOnError extends boolean = false>(
  options: Options<GetRecordData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRecordResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getRecordResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness/{date}",
    ...options,
  });
};

/**
 * Update the wellness record for the date (ISO-8601)
 * Only fields provided are changed
 */
export const updateWellness = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWellnessData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWellnessResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateWellnessResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness/{date}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update an array of wellness records all for the same athlete
 * The id of each record is the day (ISO-8601). Only fields provided are changed
 */
export const updateWellnessBulk = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWellnessBulkData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWellnessBulkResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness-bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Upload wellness records in CSV format as multipart/form-data
 */
export const uploadWellness = <ThrowOnError extends boolean = false>(
  options: Options<UploadWellnessData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadWellnessResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update a wellness record, id is the day (ISO-8601)
 * Only fields provided are changed
 */
export const updateWellness1 = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWellness1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWellness1Responses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateWellness1ResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the athlete's weather forecast configuration
 */
export const getWeatherConfig = <ThrowOnError extends boolean = false>(
  options: Options<GetWeatherConfigData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWeatherConfigResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/weather-config",
    ...options,
  });
};

/**
 * Update the athlete's weather forecast configuration
 */
export const updateWeatherConfig = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWeatherConfigData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWeatherConfigResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/weather-config",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the athlete's training plan
 */
export const getAthleteTrainingPlan = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteTrainingPlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteTrainingPlanResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getAthleteTrainingPlanResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/training-plan",
    ...options,
  });
};

/**
 * Change the athlete's training plan
 */
export const updateAthletePlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAthletePlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAthletePlanResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateAthletePlanResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/training-plan",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a route for an athlete
 */
export const getAthleteRoute = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteRouteResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getAthleteRouteResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/routes/{route_id}",
    ...options,
  });
};

/**
 * Update a route for an athlete
 */
export const updateAthleteRoute = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAthleteRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAthleteRouteResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateAthleteRouteResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/routes/{route_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a reminder
 */
export const deleteReminder = <ThrowOnError extends boolean = false>(
  options: Options<DeleteReminderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteReminderResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: deleteReminderResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}",
    ...options,
  });
};

/**
 * Update a reminder
 */
export const updateReminder = <ThrowOnError extends boolean = false>(
  options: Options<UpdateReminderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateReminderResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateReminderResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a gear or component
 */
export const deleteGear = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGearData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGearResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}",
    ...options,
  });
};

/**
 * Update a gear or component
 */
export const updateGear = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGearData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGearResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateGearResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update a range of workouts on a plan. Currently only hide_from_athlete can be changed
 */
export const updatePlanWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePlanWorkoutsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePlanWorkoutsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updatePlanWorkoutsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}/workouts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List athletes that the folder or plan has been shared with
 */
export const listFolderSharedWith = <ThrowOnError extends boolean = false>(
  options: Options<ListFolderSharedWithData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFolderSharedWithResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}/shared-with",
    ...options,
  });
};

/**
 * Add/remove athletes from the share list for the folder
 */
export const updateFolderSharedWith = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFolderSharedWithData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFolderSharedWithResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}/shared-with",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a workout folder or plan including all workouts
 */
export const deleteFolder = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFolderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFolderResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}",
    ...options,
  });
};

/**
 * Update a workout folder or plan
 */
export const updateFolder = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFolderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFolderResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateFolderResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete an event from an athlete's calendar
 */
export const deleteEvent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteEventResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/{eventId}",
    ...options,
  });
};

/**
 * Get an event
 */
export const showEvent = <ThrowOnError extends boolean = false>(
  options: Options<ShowEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowEventResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: showEventResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/{eventId}",
    ...options,
  });
};

/**
 * Update an event
 */
export const updateEvent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateEventResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateEventResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/{eventId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete events from an athlete's calendar by id or external_id
 * Delete events by id or by external_id. If external_id is supplied then the event must have been created by the calling OAuth application. If both id and external_id are supplied then external_id is used. Events that do not exist are ignored.
 */
export const deleteEventsBulk = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEventsBulkData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    DeleteEventsBulkResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/bulk-delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a range of events from the athlete's calendar
 */
export const deleteEvents = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteEventsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events",
    ...options,
  });
};

/**
 * Create an event on the athlete's calendar
 * This endpoint accepts workouts in native Intervals.icu format ('description' field) as well as zwo, mrc, erg and fit files (use 'file_contents' or 'file_contents_base64')
 */
export const createEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateEventResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createEventResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update all events for a date range at once. Only hide_from_athlete and athlete_cannot_edit can be updated
 */
export const updateEvents = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateEventsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateEventsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a custom item
 */
export const deleteCustomItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCustomItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCustomItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item/{itemId}",
    ...options,
  });
};

/**
 * Get a custom item
 */
export const getCustomItem = <ThrowOnError extends boolean = false>(
  options: Options<GetCustomItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCustomItemResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getCustomItemResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item/{itemId}",
    ...options,
  });
};

/**
 * Update a custom item
 */
export const updateCustomItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCustomItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCustomItemResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateCustomItemResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item/{itemId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Re-order custom items
 */
export const updateCustomItemIndexes = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCustomItemIndexesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCustomItemIndexesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item-indexes",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Apply any changes from the athlete's current plan to the athlete's calendar
 * Only workouts from today or in the future are updated
 */
export const applyCurrentPlanChanges = <ThrowOnError extends boolean = false>(
  options: Options<ApplyCurrentPlanChangesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    ApplyCurrentPlanChangesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/apply-plan-changes",
    ...options,
  });
};

/**
 * Get the athlete with sportSettings and custom_items
 */
export const getAthlete = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getAthleteResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}",
    ...options,
  });
};

/**
 * Update an athlete
 */
export const updateAthlete = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAthleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAthleteResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateAthleteResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Apply sport settings to matching activities (updates zones), done asynchronously
 */
export const applyToActivities = <ThrowOnError extends boolean = false>(
  options: Options<ApplyToActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    ApplyToActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/apply",
    ...options,
  });
};

/**
 * Delete sport settings
 */
export const deleteSettings = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSettingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSettingsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}",
    ...options,
  });
};

/**
 * Get sport settings by id or activity type e.g. Run, Ride etc.
 */
export const getSettings1 = <ThrowOnError extends boolean = false>(
  options: Options<GetSettings1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSettings1Responses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getSettings1ResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}",
    ...options,
  });
};

/**
 * Update sport settings by id or activity type e.g. Run, Ride etc.
 */
export const updateSettings = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSettingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateSettingsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateSettingsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List sport settings for the athlete
 */
export const listSettings = <ThrowOnError extends boolean = false>(
  options: Options<ListSettingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListSettingsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listSettingsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings",
    ...options,
  });
};

/**
 * Create settings for a sport with default values
 */
export const createSettings = <ThrowOnError extends boolean = false>(
  options: Options<CreateSettingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateSettingsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createSettingsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update multiple sport settings
 */
export const updateSettingsMulti = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSettingsMultiData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateSettingsMultiResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateSettingsMultiResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change training plans for a list of athletes
 */
export const updateAthletePlans = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAthletePlansData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAthletePlansResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete-plans",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Split an interval
 */
export const splitInterval = <ThrowOnError extends boolean = false>(
  options: Options<SplitIntervalData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    SplitIntervalResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: splitIntervalResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/split-interval",
    ...options,
  });
};

/**
 * Update/create an interval
 */
export const updateInterval = <ThrowOnError extends boolean = false>(
  options: Options<UpdateIntervalData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateIntervalResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateIntervalResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/intervals/{intervalId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get activity intervals
 */
export const getIntervals = <ThrowOnError extends boolean = false>(
  options: Options<GetIntervalsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIntervalsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getIntervalsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/intervals",
    ...options,
  });
};

/**
 * Update intervals for an activity
 */
export const updateIntervals = <ThrowOnError extends boolean = false>(
  options: Options<UpdateIntervalsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateIntervalsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateIntervalsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/intervals",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete intervals
 */
export const deleteIntervals = <ThrowOnError extends boolean = false>(
  options: Options<DeleteIntervalsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    DeleteIntervalsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: deleteIntervalsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/delete-intervals",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete an activity
 */
export const deleteActivity = <ThrowOnError extends boolean = false>(
  options: Options<DeleteActivityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteActivityResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}",
    ...options,
  });
};

/**
 * Get an activity
 * An empty stub object is returned for Strava activities
 */
export const getActivity = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}",
    ...options,
  });
};

/**
 * Update activity
 * Strava activities cannot be updated
 */
export const updateActivity = <ThrowOnError extends boolean = false>(
  options: Options<UpdateActivityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateActivityResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateActivityResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a shared event (e.g. race)
 */
export const createSharedEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateSharedEventData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateSharedEventResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/shared-event",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Convert a workout to .zwo (Zwift), .mrc, .erg or .fit
 * The athlete to use is extracted from the bearer token and used to resolve power targets etc.. Note that the create workout endpoint can convert workouts and might be more convenient.
 */
export const downloadWorkout = <ThrowOnError extends boolean = false>(
  options: Options<DownloadWorkoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DownloadWorkoutResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/download-workout{ext}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create multiple new workouts in a folder or plan in the athlete's workout library
 */
export const createMultipleWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<CreateMultipleWorkoutsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateMultipleWorkoutsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createMultipleWorkoutsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts/bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all the workouts in the athlete's library
 */
export const listWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<ListWorkoutsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListWorkoutsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listWorkoutsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts",
    ...options,
  });
};

/**
 * Create a new workout in a folder or plan in the athlete's workout library
 * This endpoint accepts workouts in native Intervals.icu format ('description' field) as well as zwo, mrc, erg and fit files (use 'file_contents' or 'file_contents_base64')
 */
export const createWorkout = <ThrowOnError extends boolean = false>(
  options: Options<CreateWorkoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateWorkoutResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createWorkoutResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Retire a component and replace it with a copy with the same reminders etc.
 */
export const replaceGear = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceGearData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReplaceGearResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: replaceGearResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}/replace",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a new reminder
 */
export const createReminder = <ThrowOnError extends boolean = false>(
  options: Options<CreateReminderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateReminderResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createReminderResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}/reminder",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a new gear or component
 */
export const createGear = <ThrowOnError extends boolean = false>(
  options: Options<CreateGearData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGearResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createGearResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create new workout from .zwo, .mrc, .erg or .fit file in a folder
 */
export const importWorkoutFile = <ThrowOnError extends boolean = false>(
  options: Options<ImportWorkoutFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ImportWorkoutFileResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: importWorkoutFileResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders/{folderId}/import-workout",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all the athlete's folders, plans and workouts
 */
export const listFolders = <ThrowOnError extends boolean = false>(
  options: Options<ListFoldersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFoldersResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listFoldersResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders",
    ...options,
  });
};

/**
 * Create a new workout folder or plan
 */
export const createFolder = <ThrowOnError extends boolean = false>(
  options: Options<CreateFolderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFolderResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createFolderResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/folders",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a manual activity to match a planned workout
 */
export const markEventAsDone = <ThrowOnError extends boolean = false>(
  options: Options<MarkEventAsDoneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    MarkEventAsDoneResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: markEventAsDoneResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/{eventId}/mark-done",
    ...options,
  });
};

/**
 * Create multiple events on the athlete's calendar
 * This endpoint accepts workouts in native Intervals.icu format ('description' field) as well as zwo, mrc, erg and fit files (use 'file_contents' or 'file_contents_base64')
 */
export const createMultipleEvents = <ThrowOnError extends boolean = false>(
  options: Options<CreateMultipleEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateMultipleEventsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createMultipleEventsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Duplicate workouts on a plan
 */
export const duplicateWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<DuplicateWorkoutsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DuplicateWorkoutsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: duplicateWorkoutsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/duplicate-workouts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Duplicate one or more events on the athlete's calendar
 */
export const duplicateEvents = <ThrowOnError extends boolean = false>(
  options: Options<DuplicateEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DuplicateEventsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: duplicateEventsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/duplicate-events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Convert a workout to .zwo (Zwift), .mrc, .erg or .fit.
 * The athlete's settings are used to resolve power targets etc.. Note that the create workout endpoint can convert workouts and might be more convenient.
 */
export const downloadWorkoutForAthlete = <ThrowOnError extends boolean = false>(
  options: Options<DownloadWorkoutForAthleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DownloadWorkoutForAthleteResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/download-workout{ext}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Download zip of Intervals.icu generated activity fit files
 * Strava activities are not included
 */
export const downloadActivityFitFiles = <ThrowOnError extends boolean = false>(
  options: Options<DownloadActivityFitFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DownloadActivityFitFilesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/download-fit-files",
    ...options,
  });
};

/**
 * Upload a new image for a custom item as multipart/form-data
 */
export const updateCustomItemImage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCustomItemImageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateCustomItemImageResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: updateCustomItemImageResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item/{itemId}/image",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List custom items (charts, custom fields etc.)
 */
export const listCustomItems = <ThrowOnError extends boolean = false>(
  options: Options<ListCustomItemsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListCustomItemsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listCustomItemsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item",
    ...options,
  });
};

/**
 * Create a custom item
 */
export const createCustomItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateCustomItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCustomItemResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createCustomItemResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/custom-item",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a manual activity
 */
export const createManualActivity = <ThrowOnError extends boolean = false>(
  options: Options<CreateManualActivityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateManualActivityResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: createManualActivityResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities/manual",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List activities for a date range in desc date order
 * An empty stub object is returned for Strava activities
 */
export const listActivities = <ThrowOnError extends boolean = false>(
  options: Options<ListActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listActivitiesResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities",
    ...options,
  });
};

/**
 * Create new activities from an uploaded file (fit, tcx, gpx or zip or gz of the same) as multipart/form-data
 * Use the 'file' form parameter to supply the uploaded file. Multisport files are split into multiple activities. Activities are de-duped using a hash of the file. Response code is 201 if at least one new activity was created and 200 otherwise (all dups).
 */
export const uploadActivity = <ThrowOnError extends boolean = false>(
  options: Options<UploadActivityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadActivityResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all messages (comments) for the activity
 */
export const listActivityMessages = <ThrowOnError extends boolean = false>(
  options: Options<ListActivityMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivityMessagesResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listActivityMessagesResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/messages",
    ...options,
  });
};

/**
 * Add a message (comment) to an activity
 */
export const sendActivityMessage = <ThrowOnError extends boolean = false>(
  options: Options<SendActivityMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SendActivityMessageResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: sendActivityMessageResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/messages",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List pace curve distances
 */
export const listPaceDistances = <ThrowOnError extends boolean = false>(
  options?: Options<ListPaceDistancesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListPaceDistancesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pace_distances",
    ...options,
  });
};

/**
 * Download one or more workouts from the athlete's calendar in a zip file
 */
export const downloadWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<DownloadWorkoutsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadWorkoutsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workouts.zip",
    ...options,
  });
};

/**
 * List all tags that have been applied to workouts in the athlete's library
 */
export const listTags = <ThrowOnError extends boolean = false>(
  options: Options<ListTagsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListTagsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/workout-tags",
    ...options,
  });
};

/**
 * List wellness records for date range (use .csv for CSV format)
 */
export const listWellnessRecords = <ThrowOnError extends boolean = false>(
  options: Options<ListWellnessRecordsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListWellnessRecordsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listWellnessRecordsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/wellness{ext}",
    ...options,
  });
};

/**
 * Get weather forecast information
 */
export const getForecast = <ThrowOnError extends boolean = false>(
  options: Options<GetForecastData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetForecastResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/weather-forecast",
    ...options,
  });
};

/**
 * Get the athlete's settings for phone, tablet or desktop
 */
export const getSettings = <ThrowOnError extends boolean = false>(
  options: Options<GetSettingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSettingsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/settings/{deviceClass}",
    ...options,
  });
};

/**
 * How similar is this route to another?
 * Returned routes include path information
 */
export const checkMerge = <ThrowOnError extends boolean = false>(
  options: Options<CheckMergeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckMergeResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: checkMergeResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/routes/{route_id}/similarity/{other_id}",
    ...options,
  });
};

/**
 * List routes for an athlete with activity counts
 * The path (latlngs) is not included
 */
export const listAthleteRoutes = <ThrowOnError extends boolean = false>(
  options: Options<ListAthleteRoutesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListAthleteRoutesResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listAthleteRoutesResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/routes",
    ...options,
  });
};

/**
 * Get athlete profile info
 */
export const getAthleteProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteProfileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteProfileResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getAthleteProfileResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/profile",
    ...options,
  });
};

/**
 * Get the athlete's power vs heart rate curve for a date range
 */
export const getPowerHrCurve = <ThrowOnError extends boolean = false>(
  options: Options<GetPowerHrCurveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPowerHrCurveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/power-hr-curve",
    ...options,
  });
};

/**
 * List best power curves for the athlete
 * Curves are specified as follows: 1y (past year), 2y (past 2 years) etc., 42d (past 42 days) etc., s0 (current season), s1 (previous season) etc., all (all time), r.2023-10-01.2023-10-31 (date range). Curves can also have a -kj0 or -kj1 suffix to return fatigued curves. If several of f1, f2 and f3 filter parameters are specified then each curve is returned once for each filter, for comparing curves.
 */
export const listAthletePowerCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListAthletePowerCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListAthletePowerCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/power-curves{ext}",
    ...options,
  });
};

/**
 * List best pace curves for the athlete
 * Curves are specified as follows: 1y (past year), 2y (past 2 years) etc., 42d (past 42 days) etc., s0 (current season), s1 (previous season) etc., all (all time), r.2023-10-01.2023-10-31 (date range). If several of f1, f2 and f3 filter parameters are specified then each curve is returned once for each filter, for comparing curves.
 */
export const listAthletePaceCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListAthletePaceCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListAthletePaceCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/pace-curves{ext}",
    ...options,
  });
};

/**
 * Get the power model used to resolve %MMP steps in workouts for the athlete
 */
export const getAthleteMmpModel = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteMmpModelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteMmpModelResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/mmp-model",
    ...options,
  });
};

/**
 * List best heart rate curves for the athlete
 * Curves are specified as follows: 1y (past year), 2y (past 2 years) etc., 42d (past 42 days) etc., s0 (current season), s1 (previous season) etc., all (all time), r.2023-10-01.2023-10-31 (date range). If several of the f1, f2 and f3 filter parameters are specified then each curve is returned once for each filter, for comparing curves.
 */
export const listAthleteHrCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListAthleteHrCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListAthleteHrCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/hr-curves{ext}",
    ...options,
  });
};

/**
 * List athlete gear (use .csv for CSV format)
 */
export const listGear = <ThrowOnError extends boolean = false>(
  options: Options<ListGearData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGearResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listGearResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear{ext}",
    ...options,
  });
};

/**
 * Recalculate gear stats
 */
export const calcDistanceEtc = <ThrowOnError extends boolean = false>(
  options: Options<CalcDistanceEtcData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CalcDistanceEtcResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/gear/{gearId}/calc",
    ...options,
  });
};

/**
 * List events that influence the athlete's fitness calculation in ascending date order
 * These have category FITNESS_DAYS (days for fitness and fatigue), SET_FITNESS (set starting fitness and fatigue) and SET_EFTP (set eFTP)
 */
export const listFitnessModelEvents = <ThrowOnError extends boolean = false>(
  options: Options<ListFitnessModelEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFitnessModelEventsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listFitnessModelEventsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/fitness-model-events",
    ...options,
  });
};

/**
 * Download a planned workout in zwo, mrc, erg or fit format
 */
export const downloadWorkout1 = <ThrowOnError extends boolean = false>(
  options: Options<DownloadWorkout1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadWorkout1Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events/{eventId}/download{ext}",
    ...options,
  });
};

/**
 * List all tags that have been applied to events on the athlete's calendar
 */
export const listTags1 = <ThrowOnError extends boolean = false>(
  options: Options<ListTags1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListTags1Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/event-tags",
    ...options,
  });
};

/**
 * Summary information for followed athletes
 */
export const getAthleteSummary = <ThrowOnError extends boolean = false>(
  options: Options<GetAthleteSummaryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAthleteSummaryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/athlete-summary{ext}",
    ...options,
  });
};

/**
 * List all tags that have been applied to the athlete's activities
 */
export const listTags2 = <ThrowOnError extends boolean = false>(
  options: Options<ListTags2Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListTags2Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activity-tags",
    ...options,
  });
};

/**
 * Get best power for a range of durations for matching activities in the date range
 * Use ext of .csv to get results in CSV format
 */
export const listActivityPowerCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListActivityPowerCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivityPowerCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activity-power-curves{ext}",
    ...options,
  });
};

/**
 * Get best pace for a range of distances for matching activities in the date range
 * Use ext of .csv to get results in CSV format
 */
export const listActivityPaceCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListActivityPaceCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivityPaceCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activity-pace-curves{ext}",
    ...options,
  });
};

/**
 * Get best HR for a range of durations for matching activities in the date range
 * Use ext of .csv to get results in CSV format
 */
export const listActivityHrCurves = <ThrowOnError extends boolean = false>(
  options: Options<ListActivityHrCurvesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivityHrCurvesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activity-hr-curves{ext}",
    ...options,
  });
};

/**
 * Search for activities by name or tag, returns full activities
 */
export const searchForActivitiesFull = <ThrowOnError extends boolean = false>(
  options: Options<SearchForActivitiesFullData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchForActivitiesFullResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: searchForActivitiesFullResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities/search-full",
    ...options,
  });
};

/**
 * Search for activities by name or tag, returns summary info
 */
export const searchForActivities = <ThrowOnError extends boolean = false>(
  options: Options<SearchForActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchForActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities/search",
    ...options,
  });
};

/**
 * Find activities with intervals matching duration and intensity
 * Activities returned most recent first
 */
export const searchForIntervals = <ThrowOnError extends boolean = false>(
  options: Options<SearchForIntervalsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchForIntervalsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: searchForIntervalsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities/interval-search",
    ...options,
  });
};

/**
 * Download activities as CSV
 */
export const downloadActivitiesAsCsv = <ThrowOnError extends boolean = false>(
  options: Options<DownloadActivitiesAsCsvData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadActivitiesAsCsvResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities.csv",
    ...options,
  });
};

/**
 * List activities before and after another activity in closest first order
 * An empty stub object is returned for Strava activities
 */
export const listActivitiesAround = <ThrowOnError extends boolean = false>(
  options: Options<ListActivitiesAroundData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivitiesAroundResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listActivitiesAroundResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/activities-around",
    ...options,
  });
};

/**
 * List pace curve distances and best effort defaults for the sport
 */
export const listPaceDistancesForSport = <ThrowOnError extends boolean = false>(
  options: Options<ListPaceDistancesForSportData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListPaceDistancesForSportResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/pace_distances",
    ...options,
  });
};

/**
 * List activities matching the settings
 */
export const listMatchingActivities = <ThrowOnError extends boolean = false>(
  options: Options<ListMatchingActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListMatchingActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/matching-activities",
    ...options,
  });
};

/**
 * Fetch multiple activities by id. Missing activities are ignored
 * Strava activities are returned as empty stubs
 */
export const getActivities = <ThrowOnError extends boolean = false>(
  options: Options<GetActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getActivitiesResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{athleteId}/activities/{ids}",
    ...options,
  });
};

/**
 * Get activity weather summary information
 */
export const getActivityWeatherSummary = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityWeatherSummaryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityWeatherSummaryResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/weather-summary",
    ...options,
  });
};

/**
 * Get activity time at heart rate data
 */
export const getTimeAtHr = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeAtHrData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeAtHrResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/time-at-hr",
    ...options,
  });
};

/**
 * List streams for the activity
 * Note that this endpoint will return 'fixed_watts' as 'watts'. If 'raw_watts' is asked for or types is null then the 'watts' stream is renamed to 'raw_watts'. If ext is .csv then CSV data is returned instead of JSON
 */
export const getActivityStreams = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityStreamsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityStreamsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/streams{ext}",
    ...options,
  });
};

/**
 * Get activity segments
 */
export const getActivitySegments = <ThrowOnError extends boolean = false>(
  options: Options<GetActivitySegmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivitySegmentsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getActivitySegmentsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/segments",
    ...options,
  });
};

/**
 * Get activity power vs heart rate data in JSON or CSV (use .csv ext) format
 */
export const getPowerVsHr = <ThrowOnError extends boolean = false>(
  options: Options<GetPowerVsHrData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPowerVsHrResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/power-vs-hr{ext}",
    ...options,
  });
};

/**
 * Get activity power spike detection model
 */
export const getActivityPowerSpikeModel = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetActivityPowerSpikeModelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityPowerSpikeModelResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/power-spike-model",
    ...options,
  });
};

/**
 * Get activity power histogram
 */
export const getPowerHistogram = <ThrowOnError extends boolean = false>(
  options: Options<GetPowerHistogramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPowerHistogramResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/power-histogram",
    ...options,
  });
};

/**
 * Get activity power curve in JSON or CSV (use .csv ext) format
 */
export const getActivityPowerCurve = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityPowerCurveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityPowerCurveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/power-curve{ext}",
    ...options,
  });
};

/**
 * Get activity power curves for one or more streams in JSON or CSV (use .csv ext) format
 */
export const listActivityPowerCurves1 = <ThrowOnError extends boolean = false>(
  options: Options<ListActivityPowerCurves1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListActivityPowerCurves1Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/power-curves{ext}",
    ...options,
  });
};

/**
 * Get activity pace histogram
 */
export const getPaceHistogram = <ThrowOnError extends boolean = false>(
  options: Options<GetPaceHistogramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPaceHistogramResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/pace-histogram",
    ...options,
  });
};

/**
 * Get activity pace curve in JSON or CSV (use .csv ext) format
 */
export const getActivityPaceCurve = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityPaceCurveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityPaceCurveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/pace-curve{ext}",
    ...options,
  });
};

/**
 * Get activity map data
 */
export const getActivityMap = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityMapData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityMapResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getActivityMapResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/map",
    ...options,
  });
};

/**
 * Return interval like stats for part of the activity
 */
export const getIntervalStats = <ThrowOnError extends boolean = false>(
  options: Options<GetIntervalStatsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIntervalStatsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getIntervalStatsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/interval-stats",
    ...options,
  });
};

/**
 * Get activity heart rate training load model
 */
export const getHrTrainingLoadModel = <ThrowOnError extends boolean = false>(
  options: Options<GetHrTrainingLoadModelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetHrTrainingLoadModelResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/hr-load-model",
    ...options,
  });
};

/**
 * Get activity heart rate histogram
 */
export const getHrHistogram = <ThrowOnError extends boolean = false>(
  options: Options<GetHrHistogramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetHrHistogramResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/hr-histogram",
    ...options,
  });
};

/**
 * Get activity heart rate curve in JSON or CSV (use .csv ext) format
 */
export const getActivityHrCurve = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityHrCurveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActivityHrCurveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/hr-curve{ext}",
    ...options,
  });
};

/**
 * Download Intervals.icu generated activity gpx file
 * Not supported for Strava activities and activities without GPS data
 */
export const downloadActivityGpxFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadActivityGpxFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadActivityGpxFileResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/gpx-file",
    ...options,
  });
};

/**
 * Get activity gradient adjusted pace histogram
 */
export const getGapHistogram = <ThrowOnError extends boolean = false>(
  options: Options<GetGapHistogramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGapHistogramResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/gap-histogram",
    ...options,
  });
};

/**
 * Download Intervals.icu generated activity fit file
 * Not supported for Strava activities
 */
export const downloadActivityFitFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadActivityFitFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadActivityFitFileResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/fit-file",
    ...options,
  });
};

/**
 * Download original activity file, Strava activities not supported
 */
export const downloadActivityFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadActivityFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadActivityFileResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/file",
    ...options,
  });
};

/**
 * Find best efforts in the activity
 * One of duration or distance is required
 */
export const findBestEfforts = <ThrowOnError extends boolean = false>(
  options: Options<FindBestEffortsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    FindBestEffortsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/activity/{id}/best-efforts",
    ...options,
  });
};

/**
 * List events (planned workouts, notes etc.) on the athlete's calendar, add .csv for CSV output
 */
export const listEvents = <ThrowOnError extends boolean = false>(
  options: Options<ListEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListEventsResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: listEventsResponseTransformer,
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/athlete/{id}/events{format}",
    ...options,
  });
};

/**
 * Disconnect the athlete from the app matching the bearer token
 */
export const disconnectApp = <ThrowOnError extends boolean = false>(
  options?: Options<DisconnectAppData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    DisconnectAppResponses,
    DisconnectAppErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/disconnect-app",
    ...options,
  });
};
