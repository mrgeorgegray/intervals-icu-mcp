// This file is auto-generated by @hey-api/openapi-ts

import type {
  ShowWorkoutResponse,
  UpdateWorkoutResponse,
  GetRecordResponse,
  UpdateWellnessResponse,
  UpdateWellness1Response,
  GetAthleteTrainingPlanResponse,
  UpdateAthletePlanResponse,
  GetAthleteRouteResponse,
  UpdateAthleteRouteResponse,
  DeleteReminderResponse,
  UpdateReminderResponse,
  UpdateGearResponse,
  UpdatePlanWorkoutsResponse,
  UpdateFolderResponse,
  ShowEventResponse,
  UpdateEventResponse,
  CreateEventResponse,
  UpdateEventsResponse,
  GetCustomItemResponse,
  UpdateCustomItemResponse,
  GetAthleteResponse,
  UpdateAthleteResponse,
  GetSettings1Response,
  UpdateSettingsResponse,
  ListSettingsResponse,
  CreateSettingsResponse,
  UpdateSettingsMultiResponse,
  SplitIntervalResponse,
  UpdateIntervalResponse,
  GetIntervalsResponse,
  UpdateIntervalsResponse,
  DeleteIntervalsResponse,
  UpdateActivityResponse,
  CreateMultipleWorkoutsResponse,
  ListWorkoutsResponse,
  CreateWorkoutResponse,
  ReplaceGearResponse,
  CreateReminderResponse,
  CreateGearResponse,
  ImportWorkoutFileResponse,
  ListFoldersResponse,
  CreateFolderResponse,
  MarkEventAsDoneResponse,
  CreateMultipleEventsResponse,
  DuplicateWorkoutsResponse,
  DuplicateEventsResponse,
  UpdateCustomItemImageResponse,
  ListCustomItemsResponse,
  CreateCustomItemResponse,
  CreateManualActivityResponse,
  ListActivitiesResponse,
  ListActivityMessagesResponse,
  SendActivityMessageResponse,
  ListWellnessRecordsResponse,
  CheckMergeResponse,
  ListAthleteRoutesResponse,
  GetAthleteProfileResponse,
  ListGearResponse,
  ListFitnessModelEventsResponse,
  SearchForActivitiesFullResponse,
  SearchForIntervalsResponse,
  ListActivitiesAroundResponse,
  GetActivitiesResponse,
  GetActivitySegmentsResponse,
  GetActivityMapResponse,
  GetIntervalStatsResponse,
  ListEventsResponse,
} from "./types.gen";

const workoutSchemaResponseTransformer = (data: any) => {
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  if (data.plan_applied) {
    data.plan_applied = new Date(data.plan_applied);
  }
  return data;
};

export const showWorkoutResponseTransformer = async (
  data: any
): Promise<ShowWorkoutResponse> => {
  data = workoutSchemaResponseTransformer(data);
  return data;
};

export const updateWorkoutResponseTransformer = async (
  data: any
): Promise<UpdateWorkoutResponse> => {
  data = workoutSchemaResponseTransformer(data);
  return data;
};

const wellnessSchemaResponseTransformer = (data: any) => {
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  return data;
};

export const getRecordResponseTransformer = async (
  data: any
): Promise<GetRecordResponse> => {
  data = wellnessSchemaResponseTransformer(data);
  return data;
};

export const updateWellnessResponseTransformer = async (
  data: any
): Promise<UpdateWellnessResponse> => {
  data = wellnessSchemaResponseTransformer(data);
  return data;
};

export const updateWellness1ResponseTransformer = async (
  data: any
): Promise<UpdateWellness1Response> => {
  data = wellnessSchemaResponseTransformer(data);
  return data;
};

const folderSchemaResponseTransformer = (data: any) => {
  if (data.children) {
    data.children = data.children.map((item: any) => {
      return workoutSchemaResponseTransformer(item);
    });
  }
  return data;
};

const athleteTrainingPlanSchemaResponseTransformer = (data: any) => {
  if (data.training_plan_last_applied) {
    data.training_plan_last_applied = new Date(data.training_plan_last_applied);
  }
  if (data.training_plan) {
    data.training_plan = folderSchemaResponseTransformer(data.training_plan);
  }
  return data;
};

export const getAthleteTrainingPlanResponseTransformer = async (
  data: any
): Promise<GetAthleteTrainingPlanResponse> => {
  data = athleteTrainingPlanSchemaResponseTransformer(data);
  return data;
};

export const updateAthletePlanResponseTransformer = async (
  data: any
): Promise<UpdateAthletePlanResponse> => {
  data = athleteTrainingPlanSchemaResponseTransformer(data);
  return data;
};

const athleteRouteSchemaResponseTransformer = (data: any) => {
  if (data.route_id) {
    data.route_id = BigInt(data.route_id.toString());
  }
  if (data.replaced_by_route_id) {
    data.replaced_by_route_id = BigInt(data.replaced_by_route_id.toString());
  }
  return data;
};

export const getAthleteRouteResponseTransformer = async (
  data: any
): Promise<GetAthleteRouteResponse> => {
  data = athleteRouteSchemaResponseTransformer(data);
  return data;
};

export const updateAthleteRouteResponseTransformer = async (
  data: any
): Promise<UpdateAthleteRouteResponse> => {
  data = athleteRouteSchemaResponseTransformer(data);
  return data;
};

const gearReminderSchemaResponseTransformer = (data: any) => {
  if (data.last_reset) {
    data.last_reset = new Date(data.last_reset);
  }
  if (data.snoozed_until) {
    data.snoozed_until = new Date(data.snoozed_until);
  }
  return data;
};

const gearSchemaResponseTransformer = (data: any) => {
  if (data.reminders) {
    data.reminders = data.reminders.map((item: any) => {
      return gearReminderSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const deleteReminderResponseTransformer = async (
  data: any
): Promise<DeleteReminderResponse> => {
  data = gearSchemaResponseTransformer(data);
  return data;
};

export const updateReminderResponseTransformer = async (
  data: any
): Promise<UpdateReminderResponse> => {
  data = gearSchemaResponseTransformer(data);
  return data;
};

export const updateGearResponseTransformer = async (
  data: any
): Promise<UpdateGearResponse> => {
  data = gearSchemaResponseTransformer(data);
  return data;
};

export const updatePlanWorkoutsResponseTransformer = async (
  data: any
): Promise<UpdatePlanWorkoutsResponse> => {
  data = data.map((item: any) => {
    return workoutSchemaResponseTransformer(item);
  });
  return data;
};

export const updateFolderResponseTransformer = async (
  data: any
): Promise<UpdateFolderResponse> => {
  data = folderSchemaResponseTransformer(data);
  return data;
};

const pushErrorSchemaResponseTransformer = (data: any) => {
  if (data.date) {
    data.date = new Date(data.date);
  }
  return data;
};

const eventSchemaResponseTransformer = (data: any) => {
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  if (data.push_errors) {
    data.push_errors = data.push_errors.map((item: any) => {
      return pushErrorSchemaResponseTransformer(item);
    });
  }
  if (data.plan_applied) {
    data.plan_applied = new Date(data.plan_applied);
  }
  return data;
};

export const showEventResponseTransformer = async (
  data: any
): Promise<ShowEventResponse> => {
  data = eventSchemaResponseTransformer(data);
  return data;
};

export const updateEventResponseTransformer = async (
  data: any
): Promise<UpdateEventResponse> => {
  data = eventSchemaResponseTransformer(data);
  return data;
};

export const createEventResponseTransformer = async (
  data: any
): Promise<CreateEventResponse> => {
  data = eventSchemaResponseTransformer(data);
  return data;
};

export const updateEventsResponseTransformer = async (
  data: any
): Promise<UpdateEventsResponse> => {
  data = data.map((item: any) => {
    return eventSchemaResponseTransformer(item);
  });
  return data;
};

const customItemSchemaResponseTransformer = (data: any) => {
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  return data;
};

export const getCustomItemResponseTransformer = async (
  data: any
): Promise<GetCustomItemResponse> => {
  data = customItemSchemaResponseTransformer(data);
  return data;
};

export const updateCustomItemResponseTransformer = async (
  data: any
): Promise<UpdateCustomItemResponse> => {
  data = customItemSchemaResponseTransformer(data);
  return data;
};

const sportSettingsSchemaResponseTransformer = (data: any) => {
  if (data.created) {
    data.created = new Date(data.created);
  }
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  return data;
};

const withSportSettingsSchemaResponseTransformer = (data: any) => {
  if (data.icu_last_seen) {
    data.icu_last_seen = new Date(data.icu_last_seen);
  }
  if (data.icu_activated) {
    data.icu_activated = new Date(data.icu_activated);
  }
  if (data.garmin_sync_after) {
    data.garmin_sync_after = new Date(data.garmin_sync_after);
  }
  if (data.icu_garmin_last_upload) {
    data.icu_garmin_last_upload = new Date(data.icu_garmin_last_upload);
  }
  if (data.suunto_last_upload) {
    data.suunto_last_upload = new Date(data.suunto_last_upload);
  }
  if (data.coros_last_upload) {
    data.coros_last_upload = new Date(data.coros_last_upload);
  }
  if (data.plan_expires) {
    data.plan_expires = new Date(data.plan_expires);
  }
  if (data.trial_end_date) {
    data.trial_end_date = new Date(data.trial_end_date);
  }
  if (data.sportSettings) {
    data.sportSettings = data.sportSettings.map((item: any) => {
      return sportSettingsSchemaResponseTransformer(item);
    });
  }
  if (data.custom_items) {
    data.custom_items = data.custom_items.map((item: any) => {
      return customItemSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getAthleteResponseTransformer = async (
  data: any
): Promise<GetAthleteResponse> => {
  data = withSportSettingsSchemaResponseTransformer(data);
  return data;
};

const athleteSchemaResponseTransformer = (data: any) => {
  if (data.icu_last_seen) {
    data.icu_last_seen = new Date(data.icu_last_seen);
  }
  if (data.icu_activated) {
    data.icu_activated = new Date(data.icu_activated);
  }
  if (data.garmin_sync_after) {
    data.garmin_sync_after = new Date(data.garmin_sync_after);
  }
  if (data.icu_garmin_last_upload) {
    data.icu_garmin_last_upload = new Date(data.icu_garmin_last_upload);
  }
  if (data.suunto_last_upload) {
    data.suunto_last_upload = new Date(data.suunto_last_upload);
  }
  if (data.coros_last_upload) {
    data.coros_last_upload = new Date(data.coros_last_upload);
  }
  if (data.plan_expires) {
    data.plan_expires = new Date(data.plan_expires);
  }
  if (data.trial_end_date) {
    data.trial_end_date = new Date(data.trial_end_date);
  }
  return data;
};

export const updateAthleteResponseTransformer = async (
  data: any
): Promise<UpdateAthleteResponse> => {
  data = athleteSchemaResponseTransformer(data);
  return data;
};

export const getSettings1ResponseTransformer = async (
  data: any
): Promise<GetSettings1Response> => {
  data = sportSettingsSchemaResponseTransformer(data);
  return data;
};

export const updateSettingsResponseTransformer = async (
  data: any
): Promise<UpdateSettingsResponse> => {
  data = sportSettingsSchemaResponseTransformer(data);
  return data;
};

export const listSettingsResponseTransformer = async (
  data: any
): Promise<ListSettingsResponse> => {
  data = data.map((item: any) => {
    return sportSettingsSchemaResponseTransformer(item);
  });
  return data;
};

export const createSettingsResponseTransformer = async (
  data: any
): Promise<CreateSettingsResponse> => {
  data = sportSettingsSchemaResponseTransformer(data);
  return data;
};

export const updateSettingsMultiResponseTransformer = async (
  data: any
): Promise<UpdateSettingsMultiResponse> => {
  data = data.map((item: any) => {
    return sportSettingsSchemaResponseTransformer(item);
  });
  return data;
};

const intervalSchemaResponseTransformer = (data: any) => {
  if (data.segment_effort_ids) {
    data.segment_effort_ids = data.segment_effort_ids.map((item: any) => {
      BigInt(item.toString());
      return item;
    });
  }
  return data;
};

const intervalsDtoSchemaResponseTransformer = (data: any) => {
  if (data.analyzed) {
    data.analyzed = new Date(data.analyzed);
  }
  if (data.icu_intervals) {
    data.icu_intervals = data.icu_intervals.map((item: any) => {
      return intervalSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const splitIntervalResponseTransformer = async (
  data: any
): Promise<SplitIntervalResponse> => {
  data = intervalsDtoSchemaResponseTransformer(data);
  return data;
};

export const updateIntervalResponseTransformer = async (
  data: any
): Promise<UpdateIntervalResponse> => {
  data = intervalsDtoSchemaResponseTransformer(data);
  return data;
};

export const getIntervalsResponseTransformer = async (
  data: any
): Promise<GetIntervalsResponse> => {
  data = intervalsDtoSchemaResponseTransformer(data);
  return data;
};

export const updateIntervalsResponseTransformer = async (
  data: any
): Promise<UpdateIntervalsResponse> => {
  data = intervalsDtoSchemaResponseTransformer(data);
  return data;
};

export const deleteIntervalsResponseTransformer = async (
  data: any
): Promise<DeleteIntervalsResponse> => {
  data = intervalsDtoSchemaResponseTransformer(data);
  return data;
};

const activitySchemaResponseTransformer = (data: any) => {
  if (data.created) {
    data.created = new Date(data.created);
  }
  if (data.icu_sync_date) {
    data.icu_sync_date = new Date(data.icu_sync_date);
  }
  if (data.analyzed) {
    data.analyzed = new Date(data.analyzed);
  }
  if (data.route_id) {
    data.route_id = BigInt(data.route_id.toString());
  }
  return data;
};

export const updateActivityResponseTransformer = async (
  data: any
): Promise<UpdateActivityResponse> => {
  data = activitySchemaResponseTransformer(data);
  return data;
};

export const createMultipleWorkoutsResponseTransformer = async (
  data: any
): Promise<CreateMultipleWorkoutsResponse> => {
  data = data.map((item: any) => {
    return workoutSchemaResponseTransformer(item);
  });
  return data;
};

export const listWorkoutsResponseTransformer = async (
  data: any
): Promise<ListWorkoutsResponse> => {
  data = data.map((item: any) => {
    return workoutSchemaResponseTransformer(item);
  });
  return data;
};

export const createWorkoutResponseTransformer = async (
  data: any
): Promise<CreateWorkoutResponse> => {
  data = workoutSchemaResponseTransformer(data);
  return data;
};

export const replaceGearResponseTransformer = async (
  data: any
): Promise<ReplaceGearResponse> => {
  data = data.map((item: any) => {
    return gearSchemaResponseTransformer(item);
  });
  return data;
};

export const createReminderResponseTransformer = async (
  data: any
): Promise<CreateReminderResponse> => {
  data = gearSchemaResponseTransformer(data);
  return data;
};

export const createGearResponseTransformer = async (
  data: any
): Promise<CreateGearResponse> => {
  data = gearSchemaResponseTransformer(data);
  return data;
};

export const importWorkoutFileResponseTransformer = async (
  data: any
): Promise<ImportWorkoutFileResponse> => {
  data = workoutSchemaResponseTransformer(data);
  return data;
};

export const listFoldersResponseTransformer = async (
  data: any
): Promise<ListFoldersResponse> => {
  data = data.map((item: any) => {
    return folderSchemaResponseTransformer(item);
  });
  return data;
};

export const createFolderResponseTransformer = async (
  data: any
): Promise<CreateFolderResponse> => {
  data = folderSchemaResponseTransformer(data);
  return data;
};

export const markEventAsDoneResponseTransformer = async (
  data: any
): Promise<MarkEventAsDoneResponse> => {
  data = activitySchemaResponseTransformer(data);
  return data;
};

export const createMultipleEventsResponseTransformer = async (
  data: any
): Promise<CreateMultipleEventsResponse> => {
  data = data.map((item: any) => {
    return eventSchemaResponseTransformer(item);
  });
  return data;
};

export const duplicateWorkoutsResponseTransformer = async (
  data: any
): Promise<DuplicateWorkoutsResponse> => {
  data = data.map((item: any) => {
    return workoutSchemaResponseTransformer(item);
  });
  return data;
};

export const duplicateEventsResponseTransformer = async (
  data: any
): Promise<DuplicateEventsResponse> => {
  data = data.map((item: any) => {
    return eventSchemaResponseTransformer(item);
  });
  return data;
};

export const updateCustomItemImageResponseTransformer = async (
  data: any
): Promise<UpdateCustomItemImageResponse> => {
  data = customItemSchemaResponseTransformer(data);
  return data;
};

export const listCustomItemsResponseTransformer = async (
  data: any
): Promise<ListCustomItemsResponse> => {
  data = data.map((item: any) => {
    return customItemSchemaResponseTransformer(item);
  });
  return data;
};

export const createCustomItemResponseTransformer = async (
  data: any
): Promise<CreateCustomItemResponse> => {
  data = customItemSchemaResponseTransformer(data);
  return data;
};

export const createManualActivityResponseTransformer = async (
  data: any
): Promise<CreateManualActivityResponse> => {
  data = activitySchemaResponseTransformer(data);
  return data;
};

export const listActivitiesResponseTransformer = async (
  data: any
): Promise<ListActivitiesResponse> => {
  data = data.map((item: any) => {
    return activitySchemaResponseTransformer(item);
  });
  return data;
};

const messageSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.created) {
    data.created = new Date(data.created);
  }
  if (data.activity) {
    data.activity = activitySchemaResponseTransformer(data.activity);
  }
  if (data.deleted) {
    data.deleted = new Date(data.deleted);
  }
  return data;
};

export const listActivityMessagesResponseTransformer = async (
  data: any
): Promise<ListActivityMessagesResponse> => {
  data = data.map((item: any) => {
    return messageSchemaResponseTransformer(item);
  });
  return data;
};

const chatMemberSchemaResponseTransformer = (data: any) => {
  if (data.accepted_coaching_group) {
    data.accepted_coaching_group = new Date(data.accepted_coaching_group);
  }
  return data;
};

const chatSchemaResponseTransformer = (data: any) => {
  if (data.coaching_group) {
    data.coaching_group = new Date(data.coaching_group);
  }
  if (data.updated) {
    data.updated = new Date(data.updated);
  }
  if (data.members) {
    data.members = data.members.map((item: any) => {
      return chatMemberSchemaResponseTransformer(item);
    });
  }
  if (data.kicked) {
    data.kicked = new Date(data.kicked);
  }
  if (data.last_seen_message_id) {
    data.last_seen_message_id = BigInt(data.last_seen_message_id.toString());
  }
  if (data.mute_until) {
    data.mute_until = new Date(data.mute_until);
  }
  if (data.sharedFolders) {
    data.sharedFolders = data.sharedFolders.map((item: any) => {
      return folderSchemaResponseTransformer(item);
    });
  }
  return data;
};

const newMsgSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.new_chat) {
    data.new_chat = chatSchemaResponseTransformer(data.new_chat);
  }
  return data;
};

export const sendActivityMessageResponseTransformer = async (
  data: any
): Promise<SendActivityMessageResponse> => {
  data = newMsgSchemaResponseTransformer(data);
  return data;
};

export const listWellnessRecordsResponseTransformer = async (
  data: any
): Promise<ListWellnessRecordsResponse> => {
  data = data.map((item: any) => {
    return wellnessSchemaResponseTransformer(item);
  });
  return data;
};

const routeSimilaritySchemaResponseTransformer = (data: any) => {
  if (data.route) {
    data.route = athleteRouteSchemaResponseTransformer(data.route);
  }
  if (data.other) {
    data.other = athleteRouteSchemaResponseTransformer(data.other);
  }
  return data;
};

export const checkMergeResponseTransformer = async (
  data: any
): Promise<CheckMergeResponse> => {
  data = routeSimilaritySchemaResponseTransformer(data);
  return data;
};

const withCountSchemaResponseTransformer = (data: any) => {
  if (data.route_id) {
    data.route_id = BigInt(data.route_id.toString());
  }
  if (data.replaced_by_route_id) {
    data.replaced_by_route_id = BigInt(data.replaced_by_route_id.toString());
  }
  return data;
};

export const listAthleteRoutesResponseTransformer = async (
  data: any
): Promise<ListAthleteRoutesResponse> => {
  data = data.map((item: any) => {
    return withCountSchemaResponseTransformer(item);
  });
  return data;
};

const athleteProfileSchemaResponseTransformer = (data: any) => {
  if (data.sharedFolders) {
    data.sharedFolders = data.sharedFolders.map((item: any) => {
      return folderSchemaResponseTransformer(item);
    });
  }
  if (data.customItems) {
    data.customItems = data.customItems.map((item: any) => {
      return customItemSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getAthleteProfileResponseTransformer = async (
  data: any
): Promise<GetAthleteProfileResponse> => {
  data = athleteProfileSchemaResponseTransformer(data);
  return data;
};

export const listGearResponseTransformer = async (
  data: any
): Promise<ListGearResponse> => {
  data = data.map((item: any) => {
    return gearSchemaResponseTransformer(item);
  });
  return data;
};

export const listFitnessModelEventsResponseTransformer = async (
  data: any
): Promise<ListFitnessModelEventsResponse> => {
  data = data.map((item: any) => {
    return eventSchemaResponseTransformer(item);
  });
  return data;
};

export const searchForActivitiesFullResponseTransformer = async (
  data: any
): Promise<SearchForActivitiesFullResponse> => {
  data = data.map((item: any) => {
    return activitySchemaResponseTransformer(item);
  });
  return data;
};

export const searchForIntervalsResponseTransformer = async (
  data: any
): Promise<SearchForIntervalsResponse> => {
  data = data.map((item: any) => {
    return activitySchemaResponseTransformer(item);
  });
  return data;
};

export const listActivitiesAroundResponseTransformer = async (
  data: any
): Promise<ListActivitiesAroundResponse> => {
  data = data.map((item: any) => {
    return activitySchemaResponseTransformer(item);
  });
  return data;
};

export const getActivitiesResponseTransformer = async (
  data: any
): Promise<GetActivitiesResponse> => {
  data = data.map((item: any) => {
    return activitySchemaResponseTransformer(item);
  });
  return data;
};

const icuSegmentSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString());
  }
  if (data.segment_id) {
    data.segment_id = BigInt(data.segment_id.toString());
  }
  return data;
};

export const getActivitySegmentsResponseTransformer = async (
  data: any
): Promise<GetActivitySegmentsResponse> => {
  data = data.map((item: any) => {
    return icuSegmentSchemaResponseTransformer(item);
  });
  return data;
};

const mapDataSchemaResponseTransformer = (data: any) => {
  if (data.route) {
    data.route = athleteRouteSchemaResponseTransformer(data.route);
  }
  return data;
};

export const getActivityMapResponseTransformer = async (
  data: any
): Promise<GetActivityMapResponse> => {
  data = mapDataSchemaResponseTransformer(data);
  return data;
};

export const getIntervalStatsResponseTransformer = async (
  data: any
): Promise<GetIntervalStatsResponse> => {
  data = intervalSchemaResponseTransformer(data);
  return data;
};

export const listEventsResponseTransformer = async (
  data: any
): Promise<ListEventsResponse> => {
  data = data.map((item: any) => {
    return eventSchemaResponseTransformer(item);
  });
  return data;
};
