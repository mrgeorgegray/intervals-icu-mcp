// This file is auto-generated by @hey-api/openapi-ts

export type AthleteSearchResult = {
  id?: string;
  name?: string;
  profile_medium?: string;
  city?: string;
  state?: string;
  country?: string;
  timezone?: string;
  sex?: string;
  bio?: string;
  website?: string;
  email?: string;
};

export type SharedEvent = {
  id?: number;
  external_id?: string;
  athlete_id?: string;
  category?: "RACE" | "WORKOUT";
  types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  name?: string;
  start_date_local?: string;
  visibility?: "PUBLIC" | "GROUP";
  chat_id?: number;
  description?: string;
  website?: string;
  closing_date_local?: string;
  location?: string;
  address?: string;
  country?: string;
  region?: string;
  lat?: number;
  lon?: number;
  route_file?: string;
  polyline?: string;
  usage_count?: number;
  owner?: AthleteSearchResult;
};

export type Attachment = {
  id?: string;
  filename?: string;
  mimetype?: string;
  url?: string;
};

export type WorkoutEx = {
  athlete_id?: string;
  id?: number;
  icu_training_load?: number;
  name?: string;
  description?: string;
  type?: string;
  indoor?: boolean;
  color?: string;
  moving_time?: number;
  updated?: Date;
  joules?: number;
  joules_above_ftp?: number;
  workout_doc?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  folder_id?: number;
  day?: number;
  days?: number;
  plan_applied?: Date;
  hide_from_athlete?: boolean;
  target?: "AUTO" | "POWER" | "HR" | "PACE";
  targets?: Array<"AUTO" | "POWER" | "HR" | "PACE">;
  carbs_per_hour?: number;
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  time?: string;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  for_week?: boolean;
  file_contents?: string;
  file_contents_base64?: string;
  filename?: string;
  distance?: number;
  icu_intensity?: number;
};

export type Workout = {
  athlete_id?: string;
  id?: number;
  icu_training_load?: number;
  name?: string;
  description?: string;
  type?: string;
  indoor?: boolean;
  color?: string;
  moving_time?: number;
  updated?: Date;
  joules?: number;
  joules_above_ftp?: number;
  workout_doc?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  folder_id?: number;
  day?: number;
  days?: number;
  plan_applied?: Date;
  hide_from_athlete?: boolean;
  target?: "AUTO" | "POWER" | "HR" | "PACE";
  targets?: Array<"AUTO" | "POWER" | "HR" | "PACE">;
  carbs_per_hour?: number;
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  time?: string;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  for_week?: boolean;
  distance?: number;
  icu_intensity?: number;
};

export type SportInfo = {
  type?:
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other";
  eftp?: number;
};

export type Wellness = {
  id?: string;
  ctl?: number;
  atl?: number;
  rampRate?: number;
  ctlLoad?: number;
  atlLoad?: number;
  sportInfo?: Array<SportInfo>;
  updated?: Date;
  weight?: number;
  restingHR?: number;
  hrv?: number;
  hrvSDNN?: number;
  menstrualPhase?: "PERIOD" | "FOLLICULAR" | "OVULATING" | "LUTEAL" | "NONE";
  menstrualPhasePredicted?:
    | "PERIOD"
    | "FOLLICULAR"
    | "OVULATING"
    | "LUTEAL"
    | "NONE";
  kcalConsumed?: number;
  sleepSecs?: number;
  sleepScore?: number;
  sleepQuality?: number;
  avgSleepingHR?: number;
  soreness?: number;
  fatigue?: number;
  stress?: number;
  mood?: number;
  motivation?: number;
  injury?: number;
  spO2?: number;
  systolic?: number;
  diastolic?: number;
  hydration?: number;
  hydrationVolume?: number;
  readiness?: number;
  baevskySI?: number;
  bloodGlucose?: number;
  lactate?: number;
  bodyFat?: number;
  abdomen?: number;
  vo2max?: number;
  comments?: string;
  steps?: number;
  respiration?: number;
  locked?: boolean;
};

export type Forecast = {
  id?: number;
  provider?: "OPEN_WEATHER";
  location?: string;
  label?: string;
  lat?: number;
  lon?: number;
  enabled?: boolean;
};

export type WeatherConfig = {
  forecasts?: Array<Forecast>;
};

export type AthleteTrainingPlanUpdate = {
  id?: string;
  training_plan_id?: number;
  training_plan_start_date?: string;
  training_plan_alias?: string;
};

export type AthleteTrainingPlan = {
  athlete_id?: string;
  training_plan_id?: number;
  training_plan_start_date?: string;
  timezone?: string;
  training_plan_last_applied?: Date;
  training_plan?: Folder;
  training_plan_alias?: string;
};

export type Folder = {
  athlete_id?: string;
  id?: number;
  type?: "FOLDER" | "PLAN";
  name?: string;
  description?: string;
  children?: Array<Workout>;
  visibility?: "PRIVATE" | "PUBLIC";
  start_date_local?: string;
  rollout_weeks?: number;
  auto_rollout_day?: number;
  read_only_workouts?: boolean;
  starting_ctl?: number;
  starting_atl?: number;
  activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  num_workouts?: number;
  duration_weeks?: number;
  hours_per_week_min?: number;
  hours_per_week_max?: number;
  workout_targets?: Array<"AUTO" | "POWER" | "HR" | "PACE">;
  blurb?: string;
  canEdit?: boolean;
  sharedWithCount?: number;
  shareToken?: string;
  owner?: AthleteSearchResult;
};

export type AthleteRoute = {
  athlete_id?: string;
  route_id?: bigint;
  name?: string;
  rename_activities?: boolean;
  commute?: boolean;
  tags?: Array<string>;
  description?: string;
  replaced_by_route_id?: bigint;
  latlngs?: Array<Array<number>>;
};

export type GearReminder = {
  id?: number;
  gear_id?: string;
  name?: string;
  distance?: number;
  time?: number;
  activities?: number;
  days?: number;
  last_reset?: Date;
  starting_distance?: number;
  starting_time?: number;
  starting_activities?: number;
  snoozed_until?: Date;
  percent_used?: number;
  distance_used?: number;
  time_used?: number;
  activities_used?: number;
  days_used?: number;
};

export type ActivityFilter = {
  id?: number;
  field_id?:
    | "type"
    | "indoor"
    | "name"
    | "notName"
    | "description"
    | "moving_time"
    | "elapsed_time"
    | "coasting_time"
    | "distance"
    | "climbing"
    | "load"
    | "source"
    | "race"
    | "average_heartrate"
    | "max_heartrate"
    | "hrrc"
    | "average_power"
    | "norm_power"
    | "pace"
    | "gap"
    | "average_speed"
    | "max_speed"
    | "variability_index"
    | "intensity"
    | "average_cadence"
    | "average_cadence_z2"
    | "average_temp"
    | "calories"
    | "work"
    | "work_above_ftp"
    | "max_wbal_depletion"
    | "efficiency"
    | "power_hr"
    | "power_hr_z2"
    | "power_hr_z2_mins"
    | "rpe"
    | "feel"
    | "session_rpe"
    | "kg_lifted"
    | "power_meter"
    | "power_meter_serial"
    | "gear_name"
    | "trimp"
    | "custom"
    | "tags"
    | "device_name"
    | "compliance"
    | "polarization_index"
    | "day_of_week"
    | "average_altitude"
    | "min_altitude"
    | "max_altitude"
    | "start_time"
    | "route_id";
  code?: string;
  operator?: string;
  value?: {
    [key: string]: unknown;
  };
  not?: boolean;
};

export type Gear = {
  id?: string;
  athlete_id?: string;
  type?:
    | "Bike"
    | "Shoes"
    | "Wetsuit"
    | "RowingMachine"
    | "Skis"
    | "Snowboard"
    | "Boat"
    | "Board"
    | "Equipment"
    | "Accessories"
    | "Apparel"
    | "Computer"
    | "Light"
    | "Battery"
    | "Brake"
    | "BrakePads"
    | "Rotor"
    | "Drivetrain"
    | "BottomBracket"
    | "Cassette"
    | "Chain"
    | "Chainrings"
    | "Crankset"
    | "Derailleur"
    | "Pedals"
    | "Lever"
    | "Cable"
    | "Frame"
    | "Fork"
    | "Handlebar"
    | "Headset"
    | "Saddle"
    | "Seatpost"
    | "Shock"
    | "Stem"
    | "Axel"
    | "Hub"
    | "Trainer"
    | "Tube"
    | "Tyre"
    | "Wheel"
    | "Wheelset"
    | "PowerMeter"
    | "Cleats"
    | "CyclingShoes"
    | "Paddle";
  name?: string;
  purchased?: string;
  notes?: string;
  distance?: number;
  time?: number;
  activities?: number;
  use_elapsed_time?: boolean;
  retired?: string;
  component_ids?: Array<string>;
  reminders?: Array<GearReminder>;
  activity_filters?: Array<ActivityFilter>;
  component?: boolean;
};

export type SharedWith = {
  id?: string;
  name?: string;
  profile_medium?: string;
  city?: string;
  state?: string;
  country?: string;
  timezone?: string;
  sex?: string;
  bio?: string;
  website?: string;
  email?: string;
  canEdit?: boolean;
};

export type EventEx = {
  id?: number;
  start_date_local?: string;
  icu_training_load?: number;
  icu_atl?: number;
  icu_ctl?: number;
  type?: string;
  carbs_used?: number;
  calendar_id?: number;
  uid?: string;
  athlete_id?: string;
  category?:
    | "WORKOUT"
    | "RACE_A"
    | "RACE_B"
    | "RACE_C"
    | "NOTE"
    | "HOLIDAY"
    | "SICK"
    | "INJURED"
    | "SET_EFTP"
    | "FITNESS_DAYS"
    | "SEASON_START"
    | "TARGET"
    | "SET_FITNESS";
  end_date_local?: string;
  name?: string;
  description?: string;
  indoor?: boolean;
  color?: string;
  moving_time?: number;
  icu_ftp?: number;
  atl_days?: number;
  ctl_days?: number;
  updated?: Date;
  not_on_fitness_chart?: boolean;
  show_as_note?: boolean;
  show_on_ctl_line?: boolean;
  for_week?: boolean;
  target?: "AUTO" | "POWER" | "HR" | "PACE";
  joules?: number;
  joules_above_ftp?: number;
  workout_doc?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  push_errors?: Array<PushError>;
  athlete_cannot_edit?: boolean;
  hide_from_athlete?: boolean;
  structure_read_only?: boolean;
  created_by_id?: string;
  shared_event_id?: number;
  entered?: boolean;
  carbs_per_hour?: number;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  distance?: number;
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  oauth_client_id?: number;
  external_id?: string;
  load_target?: number;
  time_target?: number;
  distance_target?: number;
  plan_athlete_id?: string;
  plan_folder_id?: number;
  plan_workout_id?: number;
  plan_applied?: Date;
  workout?: Workout;
  file_contents?: string;
  file_contents_base64?: string;
  filename?: string;
  icu_intensity?: number;
};

export type PushError = {
  service?: string;
  message?: string;
  date?: Date;
};

export type Event = {
  id?: number;
  start_date_local?: string;
  icu_training_load?: number;
  icu_atl?: number;
  icu_ctl?: number;
  type?: string;
  carbs_used?: number;
  calendar_id?: number;
  uid?: string;
  athlete_id?: string;
  category?:
    | "WORKOUT"
    | "RACE_A"
    | "RACE_B"
    | "RACE_C"
    | "NOTE"
    | "HOLIDAY"
    | "SICK"
    | "INJURED"
    | "SET_EFTP"
    | "FITNESS_DAYS"
    | "SEASON_START"
    | "TARGET"
    | "SET_FITNESS";
  end_date_local?: string;
  name?: string;
  description?: string;
  indoor?: boolean;
  color?: string;
  moving_time?: number;
  icu_ftp?: number;
  atl_days?: number;
  ctl_days?: number;
  updated?: Date;
  not_on_fitness_chart?: boolean;
  show_as_note?: boolean;
  show_on_ctl_line?: boolean;
  for_week?: boolean;
  target?: "AUTO" | "POWER" | "HR" | "PACE";
  joules?: number;
  joules_above_ftp?: number;
  workout_doc?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  push_errors?: Array<PushError>;
  athlete_cannot_edit?: boolean;
  hide_from_athlete?: boolean;
  structure_read_only?: boolean;
  created_by_id?: string;
  shared_event_id?: number;
  entered?: boolean;
  carbs_per_hour?: number;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  distance?: number;
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  oauth_client_id?: number;
  external_id?: string;
  load_target?: number;
  time_target?: number;
  distance_target?: number;
  plan_athlete_id?: string;
  plan_folder_id?: number;
  plan_workout_id?: number;
  plan_applied?: Date;
  icu_intensity?: number;
};

export type DoomedEvent = {
  id?: number;
  external_id?: string;
};

export type DeleteEventsResponse = {
  eventsDeleted?: number;
};

export type CustomItem = {
  id?: number;
  athlete_id?: string;
  type?:
    | "FITNESS_CHART"
    | "TRACE_CHART"
    | "INPUT_FIELD"
    | "ACTIVITY_FIELD"
    | "INTERVAL_FIELD"
    | "ACTIVITY_STREAM"
    | "ACTIVITY_CHART"
    | "ACTIVITY_HISTOGRAM"
    | "ACTIVITY_HEATMAP"
    | "ACTIVITY_MAP"
    | "ACTIVITY_PANEL";
  visibility?: "PRIVATE" | "FOLLOWERS" | "PUBLIC";
  name?: string;
  description?: string;
  image?: string;
  content?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  usage_count?: number;
  index?: number;
  hide_script?: boolean;
  hidden_by_id?: string;
  updated?: Date;
  from_athlete?: AthleteSearchResult;
  from_id?: number;
};

export type AthleteUpdateDto = {
  id?: string;
  name?: string;
  firstname?: string;
  lastname?: string;
  profile_medium?: string;
  measurement_preference?: string;
  weight_pref_lb?: boolean;
  fahrenheit?: boolean;
  wind_speed?: "MPS" | "KNOTS" | "KMH" | "MPH" | "BFT";
  rain?: "MM" | "INCHES";
  weight?: number;
  email?: string;
  sex?: string;
  city?: string;
  state?: string;
  country?: string;
  bikes?: Array<StravaGear>;
  shoes?: Array<StravaGear>;
  timezone?: string;
  locale?: string;
  visibility?: "PRIVATE" | "PUBLIC" | "HIDDEN";
  icu_resting_hr?: number;
  icu_weight?: number;
  icu_weight_sync?: "NONE" | "STRAVA";
  icu_last_seen?: Date;
  icu_activated?: Date;
  icu_queue_pos?: number;
  icu_admin?: boolean;
  icu_friend_invite_token?: string;
  icu_permission?: "NONE" | "READ" | "WRITE";
  icu_effort_secs?: Array<number>;
  icu_coach?: boolean;
  bio?: string;
  website?: string;
  icu_date_of_birth?: string;
  icu_api_key?: string;
  icu_type_settings?: Array<Settings>;
  icu_form_as_percent?: boolean;
  icu_mmp_days?: number;
  icu_wellness_prompt?: boolean;
  icu_wellness_keys?: Array<string>;
  icu_track_menstrual_cycle?: boolean;
  icu_menstrual_cycle_perm?: "NONE" | "READ" | "WRITE";
  coach_ticks?: Array<CoachTick>;
  icu_garmin_health?: boolean;
  icu_garmin_training?: boolean;
  icu_garmin_sync_activities?: boolean;
  garmin_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  garmin_sync_after?: Date;
  icu_garmin_download_wellness?: boolean;
  icu_garmin_upload_workouts?: boolean;
  icu_garmin_outdoor_power_range?: number;
  icu_garmin_hr_range?: number;
  garmin_pace_range?: number;
  garmin_power_target?:
    | "POWER_LAP"
    | "POWER"
    | "POWER_3S"
    | "POWER_10S"
    | "POWER_30S";
  icu_garmin_last_upload?: Date;
  icu_garmin_upload_filters?: Array<ActivityFilter>;
  icu_garmin_wellness_keys?: Array<string>;
  open_step_duration?: number;
  polar_scope?: string;
  polar_sync_activities?: boolean;
  polar_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  polar_download_wellness?: boolean;
  polar_wellness_keys?: Array<string>;
  suunto_scope?: string;
  suunto_user_id?: string;
  suunto_sync_activities?: boolean;
  suunto_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  suunto_upload_workouts?: boolean;
  suunto_outdoor_power_range?: number;
  suunto_hr_range?: number;
  suunto_pace_range?: number;
  suunto_last_upload?: Date;
  suunto_upload_filters?: Array<ActivityFilter>;
  suunto_download_wellness?: boolean;
  coros_user_id?: string;
  coros_sync_activities?: boolean;
  coros_upload_workouts?: boolean;
  coros_download_wellness?: boolean;
  coros_last_upload?: Date;
  zepp_user_id?: string;
  zepp_sync_activities?: boolean;
  zepp_upload_workouts?: boolean;
  zepp_download_wellness?: boolean;
  wahoo_user_id?: string;
  wahoo_sync_activities?: boolean;
  wahoo_upload_workouts?: boolean;
  zwift_user_id?: string;
  zwift_sync_activities?: boolean;
  zwift_upload_workouts?: boolean;
  dropbox_scope?: string;
  oura_scope?: string;
  oura_wellness_keys?: Array<string>;
  whoop_scope?: string;
  whoop_wellness_keys?: Array<string>;
  google_scope?: string;
  google_wellness_keys?: Array<string>;
  icu_email_verified?: boolean;
  icu_email_disabled?: string;
  icu_send_achievements?: boolean;
  icu_send_newsletter?: boolean;
  icu_send_private_chat?: boolean;
  icu_send_private_msg?: boolean;
  icu_send_follow_req?: boolean;
  icu_send_group_chat?: boolean;
  icu_send_group_msg?: boolean;
  icu_send_activity_chat?: boolean;
  icu_send_followed_activity_chat?: boolean;
  icu_send_coached_activity_chat?: boolean;
  icu_send_activity_msg?: boolean;
  icu_send_coach_me_req?: boolean;
  icu_send_gear_alerts?: boolean;
  icu_send_plan_for_week?: boolean;
  include_descr_in_plan_for_week?: boolean;
  icu_send_followed_new_activity?: boolean;
  icu_send_coached_new_activity?: boolean;
  icu_send_coach_tick?: boolean;
  strava_allowed?: boolean;
  strava_id?: number;
  scope?: string;
  strava_sync_activities?: boolean;
  strava_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  strava_sync_other_activities?: boolean;
  ignore_strava_gear?: boolean;
  update_strava_name?: boolean;
  add_weather_to_strava_descr?: boolean;
  height?: number;
  height_units?: "CM" | "FEET";
  plan?: "FREE" | "PREMIUM" | "SUPPORTER" | "WHITELABEL";
  plan_expires?: Date;
  trial_end_date?: Date;
  sponsored_by_chat_id?: number;
  has_password?: boolean;
  beta_user?: boolean;
  currency?: string;
  training_plan_id?: number;
  training_plan_start_date?: string;
  recalcHrZones?: boolean;
  applyToAll?: boolean;
  localDate?: string;
  password?: string;
  strava_authorized?: boolean;
};

export type CoachTick = {
  id?: number;
  text?: string;
};

export type Settings = {
  type?:
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other";
  ctlFactor?: number;
  atlFactor?: number;
};

export type StravaGear = {
  id?: string;
  name?: string;
  distance?: number;
  primary?: boolean;
};

export type Athlete = {
  id?: string;
  name?: string;
  firstname?: string;
  lastname?: string;
  profile_medium?: string;
  measurement_preference?: string;
  weight_pref_lb?: boolean;
  fahrenheit?: boolean;
  wind_speed?: "MPS" | "KNOTS" | "KMH" | "MPH" | "BFT";
  rain?: "MM" | "INCHES";
  weight?: number;
  email?: string;
  sex?: string;
  city?: string;
  state?: string;
  country?: string;
  bikes?: Array<StravaGear>;
  shoes?: Array<StravaGear>;
  timezone?: string;
  locale?: string;
  visibility?: "PRIVATE" | "PUBLIC" | "HIDDEN";
  icu_resting_hr?: number;
  icu_weight?: number;
  icu_weight_sync?: "NONE" | "STRAVA";
  icu_last_seen?: Date;
  icu_activated?: Date;
  icu_queue_pos?: number;
  icu_admin?: boolean;
  icu_friend_invite_token?: string;
  icu_permission?: "NONE" | "READ" | "WRITE";
  icu_effort_secs?: Array<number>;
  icu_coach?: boolean;
  bio?: string;
  website?: string;
  icu_date_of_birth?: string;
  icu_api_key?: string;
  icu_type_settings?: Array<Settings>;
  icu_form_as_percent?: boolean;
  icu_mmp_days?: number;
  icu_wellness_prompt?: boolean;
  icu_wellness_keys?: Array<string>;
  icu_track_menstrual_cycle?: boolean;
  icu_menstrual_cycle_perm?: "NONE" | "READ" | "WRITE";
  coach_ticks?: Array<CoachTick>;
  icu_garmin_health?: boolean;
  icu_garmin_training?: boolean;
  icu_garmin_sync_activities?: boolean;
  garmin_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  garmin_sync_after?: Date;
  icu_garmin_download_wellness?: boolean;
  icu_garmin_upload_workouts?: boolean;
  icu_garmin_outdoor_power_range?: number;
  icu_garmin_hr_range?: number;
  garmin_pace_range?: number;
  garmin_power_target?:
    | "POWER_LAP"
    | "POWER"
    | "POWER_3S"
    | "POWER_10S"
    | "POWER_30S";
  icu_garmin_last_upload?: Date;
  icu_garmin_upload_filters?: Array<ActivityFilter>;
  icu_garmin_wellness_keys?: Array<string>;
  open_step_duration?: number;
  polar_scope?: string;
  polar_sync_activities?: boolean;
  polar_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  polar_download_wellness?: boolean;
  polar_wellness_keys?: Array<string>;
  suunto_scope?: string;
  suunto_user_id?: string;
  suunto_sync_activities?: boolean;
  suunto_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  suunto_upload_workouts?: boolean;
  suunto_outdoor_power_range?: number;
  suunto_hr_range?: number;
  suunto_pace_range?: number;
  suunto_last_upload?: Date;
  suunto_upload_filters?: Array<ActivityFilter>;
  suunto_download_wellness?: boolean;
  coros_user_id?: string;
  coros_sync_activities?: boolean;
  coros_upload_workouts?: boolean;
  coros_download_wellness?: boolean;
  coros_last_upload?: Date;
  zepp_user_id?: string;
  zepp_sync_activities?: boolean;
  zepp_upload_workouts?: boolean;
  zepp_download_wellness?: boolean;
  wahoo_user_id?: string;
  wahoo_sync_activities?: boolean;
  wahoo_upload_workouts?: boolean;
  zwift_user_id?: string;
  zwift_sync_activities?: boolean;
  zwift_upload_workouts?: boolean;
  dropbox_scope?: string;
  oura_scope?: string;
  oura_wellness_keys?: Array<string>;
  whoop_scope?: string;
  whoop_wellness_keys?: Array<string>;
  google_scope?: string;
  google_wellness_keys?: Array<string>;
  icu_email_verified?: boolean;
  icu_email_disabled?: string;
  icu_send_achievements?: boolean;
  icu_send_newsletter?: boolean;
  icu_send_private_chat?: boolean;
  icu_send_private_msg?: boolean;
  icu_send_follow_req?: boolean;
  icu_send_group_chat?: boolean;
  icu_send_group_msg?: boolean;
  icu_send_activity_chat?: boolean;
  icu_send_followed_activity_chat?: boolean;
  icu_send_coached_activity_chat?: boolean;
  icu_send_activity_msg?: boolean;
  icu_send_coach_me_req?: boolean;
  icu_send_gear_alerts?: boolean;
  icu_send_plan_for_week?: boolean;
  include_descr_in_plan_for_week?: boolean;
  icu_send_followed_new_activity?: boolean;
  icu_send_coached_new_activity?: boolean;
  icu_send_coach_tick?: boolean;
  strava_allowed?: boolean;
  strava_id?: number;
  scope?: string;
  strava_sync_activities?: boolean;
  strava_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  strava_sync_other_activities?: boolean;
  ignore_strava_gear?: boolean;
  update_strava_name?: boolean;
  add_weather_to_strava_descr?: boolean;
  height?: number;
  height_units?: "CM" | "FEET";
  plan?: "FREE" | "PREMIUM" | "SUPPORTER" | "WHITELABEL";
  plan_expires?: Date;
  trial_end_date?: Date;
  sponsored_by_chat_id?: number;
  has_password?: boolean;
  beta_user?: boolean;
  currency?: string;
  training_plan_id?: number;
  training_plan_start_date?: string;
  strava_authorized?: boolean;
};

export type ActivityCharts = {
  home?: Array<Pos>;
  power?: Array<Pos>;
  hr?: Array<Pos>;
  pace?: Array<Pos>;
  data?: Array<Pos>;
};

export type Display = {
  colorScheme?: string;
  lowIntensity?: number;
  highIntensity?: number;
  lowLoad?: number;
  highLoad?: number;
  usePairedWorkoutColor?: boolean;
  ignoreWorkoutColors?: boolean;
  showAverageHR?: boolean;
  showNormalizedWatts?: boolean;
  showLoad?: boolean;
  showWork?: boolean;
  showWorkAboveFTP?: boolean;
  showWeightLifted?: boolean;
  showAveragePower?: boolean;
  showRPE?: boolean;
  showFeel?: boolean;
  showPace?: boolean;
  showGAP?: boolean;
  showIntensity?: boolean;
  showName?: boolean;
  showIntervals?: boolean;
  showSkylineChart?: boolean;
  showPairedWorkoutChart?: boolean;
  showDescription?: boolean;
  showStartTime?: boolean;
  preciseDistance?: boolean;
  shrinkWarmup?: boolean;
  shrinkCooldown?: boolean;
  shrinkCommute?: boolean;
  color?: string;
  color2?: string;
};

export type Pos = {
  id?: string;
  width?: string;
  height?: string;
};

export type PowerModel = {
  type?: "MS_2P" | "MORTON_3P" | "FFT_CURVES" | "ECP";
  criticalPower?: number;
  wPrime?: number;
  pMax?: number;
  inputPointIndexes?: Array<number>;
  ftp?: number;
};

export type SportSettings = {
  id?: number;
  athlete_id?: string;
  types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  warmup_time?: number;
  cooldown_time?: number;
  ftp?: number;
  indoor_ftp?: number;
  w_prime?: number;
  power_zones?: Array<number>;
  sweet_spot_min?: number;
  sweet_spot_max?: number;
  power_spike_threshold?: number;
  power_zone_names?: Array<string>;
  ftp_est_min_secs?: number;
  use_laps_for_power_intervals?: boolean;
  keep_all_laps_for_power_intervals?: boolean;
  after_kj0?: number;
  after_kj1?: number;
  power_field?: string;
  lthr?: number;
  max_hr?: number;
  hr_zones?: Array<number>;
  hr_zone_names?: Array<string>;
  hr_load_type?: "AVG_HR" | "HR_ZONES" | "HRSS";
  hrrc_min_percent?: number;
  threshold_pace?: number;
  pace_units?:
    | "SECS_100M"
    | "SECS_100Y"
    | "MINS_KM"
    | "MINS_MILE"
    | "SECS_500M";
  pace_zones?: Array<number>;
  pace_zone_names?: Array<string>;
  pace_load_type?: "SWIM" | "RUN";
  gap_model?: "NONE" | "STRAVA_RUN";
  elevation_correction?: "NO" | "AUTO" | "YES";
  use_gap_zone_times?: boolean;
  best_effort_distances?: Array<number>;
  pace_curve_start?: number;
  load_order?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  tiz_order?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  workout_order?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  interval_display?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  default_gear_id?: string;
  default_indoor_gear_id?: string;
  extract_workouts?: boolean;
  show_pauses?: number;
  ignore_velocity?: boolean;
  default_workout_time?: string;
  created?: Date;
  updated?: Date;
  mmp_model?: PowerModel;
  display?: Display;
  activity_field_ids?: Array<number>;
  activity_charts?: ActivityCharts;
  other?: boolean;
  iseFTPSupported?: boolean;
  use_distance_for_intervals?: boolean;
};

export type Interval = {
  start_index?: number;
  distance?: number;
  moving_time?: number;
  elapsed_time?: number;
  average_watts?: number;
  average_watts_alt?: number;
  average_watts_alt_acc?: number;
  min_watts?: number;
  max_watts?: number;
  average_watts_kg?: number;
  max_watts_kg?: number;
  intensity?: number;
  w5s_variability?: number;
  weighted_average_watts?: number;
  training_load?: number;
  joules?: number;
  joules_above_ftp?: number;
  decoupling?: number;
  avg_lr_balance?: number;
  average_dfa_a1?: number;
  average_epoc?: number;
  wbal_start?: number;
  wbal_end?: number;
  average_respiration?: number;
  average_tidal_volume?: number;
  average_tidal_volume_min?: number;
  zone?: number;
  zone_min_watts?: number;
  zone_max_watts?: number;
  average_speed?: number;
  min_speed?: number;
  max_speed?: number;
  gap?: number;
  average_heartrate?: number;
  min_heartrate?: number;
  max_heartrate?: number;
  average_cadence?: number;
  min_cadence?: number;
  max_cadence?: number;
  average_torque?: number;
  min_torque?: number;
  max_torque?: number;
  total_elevation_gain?: number;
  min_altitude?: number;
  max_altitude?: number;
  average_gradient?: number;
  average_smo2?: number;
  average_thb?: number;
  average_smo2_2?: number;
  average_thb_2?: number;
  average_temp?: number;
  average_weather_temp?: number;
  average_feels_like?: number;
  average_wind_speed?: number;
  average_wind_gust?: number;
  prevailing_wind_deg?: number;
  average_yaw?: number;
  headwind_percent?: number;
  tailwind_percent?: number;
  id?: number;
  type?: "RECOVERY" | "WORK";
  end_index?: number;
  group_id?: string;
  segment_effort_ids?: Array<bigint>;
  start_time?: number;
  end_time?: number;
  label?: string;
  average_stride?: number;
};

export type IntervalGroup = {
  start_index?: number;
  distance?: number;
  moving_time?: number;
  elapsed_time?: number;
  average_watts?: number;
  average_watts_alt?: number;
  average_watts_alt_acc?: number;
  min_watts?: number;
  max_watts?: number;
  average_watts_kg?: number;
  max_watts_kg?: number;
  intensity?: number;
  w5s_variability?: number;
  weighted_average_watts?: number;
  training_load?: number;
  joules?: number;
  joules_above_ftp?: number;
  decoupling?: number;
  avg_lr_balance?: number;
  average_dfa_a1?: number;
  average_epoc?: number;
  wbal_start?: number;
  wbal_end?: number;
  average_respiration?: number;
  average_tidal_volume?: number;
  average_tidal_volume_min?: number;
  zone?: number;
  zone_min_watts?: number;
  zone_max_watts?: number;
  average_speed?: number;
  min_speed?: number;
  max_speed?: number;
  gap?: number;
  average_heartrate?: number;
  min_heartrate?: number;
  max_heartrate?: number;
  average_cadence?: number;
  min_cadence?: number;
  max_cadence?: number;
  average_torque?: number;
  min_torque?: number;
  max_torque?: number;
  total_elevation_gain?: number;
  min_altitude?: number;
  max_altitude?: number;
  average_gradient?: number;
  average_smo2?: number;
  average_thb?: number;
  average_smo2_2?: number;
  average_thb_2?: number;
  average_temp?: number;
  average_weather_temp?: number;
  average_feels_like?: number;
  average_wind_speed?: number;
  average_wind_gust?: number;
  prevailing_wind_deg?: number;
  average_yaw?: number;
  headwind_percent?: number;
  tailwind_percent?: number;
  id?: string;
  count?: number;
  average_stride?: number;
};

export type IntervalsDto = {
  id?: string;
  analyzed?: Date;
  icu_intervals?: Array<Interval>;
  icu_groups?: Array<IntervalGroup>;
};

export type Activity = {
  id?: string;
  start_date_local?: string;
  type?: string;
  icu_ignore_time?: boolean;
  icu_pm_cp?: number;
  icu_pm_w_prime?: number;
  icu_pm_p_max?: number;
  icu_pm_ftp?: number;
  icu_pm_ftp_secs?: number;
  icu_pm_ftp_watts?: number;
  icu_ignore_power?: boolean;
  icu_rolling_cp?: number;
  icu_rolling_w_prime?: number;
  icu_rolling_p_max?: number;
  icu_rolling_ftp?: number;
  icu_rolling_ftp_delta?: number;
  icu_training_load?: number;
  icu_atl?: number;
  icu_ctl?: number;
  paired_event_id?: number;
  icu_ftp?: number;
  icu_joules?: number;
  icu_recording_time?: number;
  elapsed_time?: number;
  icu_weighted_avg_watts?: number;
  carbs_used?: number;
  name?: string;
  description?: string;
  start_date?: string;
  distance?: number;
  icu_distance?: number;
  moving_time?: number;
  coasting_time?: number;
  total_elevation_gain?: number;
  total_elevation_loss?: number;
  timezone?: string;
  trainer?: boolean;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  commute?: boolean;
  race?: boolean;
  max_speed?: number;
  average_speed?: number;
  device_watts?: boolean;
  has_heartrate?: boolean;
  max_heartrate?: number;
  average_heartrate?: number;
  average_cadence?: number;
  calories?: number;
  average_temp?: number;
  min_temp?: number;
  max_temp?: number;
  avg_lr_balance?: number;
  gap?: number;
  gap_model?: "NONE" | "STRAVA_RUN";
  use_elevation_correction?: boolean;
  gear?: StravaGear;
  perceived_exertion?: number;
  device_name?: string;
  power_meter?: string;
  power_meter_serial?: string;
  power_meter_battery?: string;
  crank_length?: number;
  external_id?: string;
  file_sport_index?: number;
  file_type?: string;
  icu_athlete_id?: string;
  created?: Date;
  icu_sync_date?: Date;
  analyzed?: Date;
  icu_w_prime?: number;
  threshold_pace?: number;
  icu_hr_zones?: Array<number>;
  pace_zones?: Array<number>;
  lthr?: number;
  icu_resting_hr?: number;
  icu_weight?: number;
  icu_power_zones?: Array<number>;
  icu_sweet_spot_min?: number;
  icu_sweet_spot_max?: number;
  icu_power_spike_threshold?: number;
  trimp?: number;
  icu_warmup_time?: number;
  icu_cooldown_time?: number;
  icu_chat_id?: number;
  icu_ignore_hr?: boolean;
  ignore_velocity?: boolean;
  ignore_pace?: boolean;
  ignore_parts?: Array<Ignore>;
  icu_training_load_data?: number;
  interval_summary?: Array<string>;
  skyline_chart_bytes?: Array<string>;
  stream_types?: Array<string>;
  has_weather?: boolean;
  has_segments?: boolean;
  power_field_names?: Array<string>;
  power_field?: string;
  icu_zone_times?: Array<ZoneTime>;
  icu_hr_zone_times?: Array<number>;
  pace_zone_times?: Array<number>;
  gap_zone_times?: Array<number>;
  use_gap_zone_times?: boolean;
  tiz_order?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  polarization_index?: number;
  icu_achievements?: Array<IcuAchievement>;
  icu_intervals_edited?: boolean;
  lock_intervals?: boolean;
  icu_lap_count?: number;
  icu_joules_above_ftp?: number;
  icu_max_wbal_depletion?: number;
  icu_hrr?: HrRecovery;
  icu_sync_error?: string;
  icu_color?: string;
  icu_power_hr_z2?: number;
  icu_power_hr_z2_mins?: number;
  icu_cadence_z2?: number;
  icu_rpe?: number;
  feel?: number;
  kg_lifted?: number;
  decoupling?: number;
  icu_median_time_delta?: number;
  p30s_exponent?: number;
  workout_shift_secs?: number;
  strava_id?: string;
  lengths?: number;
  pool_length?: number;
  compliance?: number;
  coach_tick?: number;
  source?:
    | "STRAVA"
    | "UPLOAD"
    | "MANUAL"
    | "GARMIN_CONNECT"
    | "OAUTH_CLIENT"
    | "DROPBOX"
    | "POLAR"
    | "SUUNTO"
    | "COROS"
    | "WAHOO"
    | "ZWIFT"
    | "ZEPP";
  oauth_client_id?: number;
  oauth_client_name?: string;
  average_altitude?: number;
  min_altitude?: number;
  max_altitude?: number;
  power_load?: number;
  hr_load?: number;
  pace_load?: number;
  hr_load_type?: "AVG_HR" | "HR_ZONES" | "HRSS";
  pace_load_type?: "SWIM" | "RUN";
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  recording_stops?: Array<number>;
  average_weather_temp?: number;
  min_weather_temp?: number;
  max_weather_temp?: number;
  average_feels_like?: number;
  min_feels_like?: number;
  max_feels_like?: number;
  average_wind_speed?: number;
  average_wind_gust?: number;
  prevailing_wind_deg?: number;
  headwind_percent?: number;
  tailwind_percent?: number;
  average_clouds?: number;
  max_rain?: number;
  max_snow?: number;
  carbs_ingested?: number;
  route_id?: bigint;
  pace?: number;
  athlete_max_hr?: number;
  group?: string;
  icu_intensity?: number;
  icu_efficiency_factor?: number;
  icu_power_hr?: number;
  session_rpe?: number;
  average_stride?: number;
  icu_average_watts?: number;
  icu_variability_index?: number;
};

export type DataCurvePt = {
  start_index?: number;
  end_index?: number;
  secs?: number;
  value?: number;
};

export type HrRecovery = {
  start_index?: number;
  end_index?: number;
  start_time?: number;
  end_time?: number;
  start_bpm?: number;
  end_bpm?: number;
  average_watts?: number;
  hrr?: number;
};

export type IcuAchievement = {
  id?: string;
  type?: "BEST_POWER" | "FTP_UP" | "LTHR_UP" | "BEST_PACE";
  message?: string;
  watts?: number;
  secs?: number;
  value?: number;
  distance?: number;
  pace?: number;
  point?: DataCurvePt;
};

export type Ignore = {
  start_index?: number;
  end_index?: number;
  power?: boolean;
  pace?: boolean;
  hr?: boolean;
};

export type ZoneTime = {
  id?: string;
  secs?: number;
};

export type CreateFolderDto = {
  athlete_id?: string;
  id?: number;
  type?: "FOLDER" | "PLAN";
  name?: string;
  description?: string;
  children?: Array<Workout>;
  visibility?: "PRIVATE" | "PUBLIC";
  start_date_local?: string;
  rollout_weeks?: number;
  auto_rollout_day?: number;
  read_only_workouts?: boolean;
  starting_ctl?: number;
  starting_atl?: number;
  activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  num_workouts?: number;
  duration_weeks?: number;
  hours_per_week_min?: number;
  hours_per_week_max?: number;
  workout_targets?: Array<"AUTO" | "POWER" | "HR" | "PACE">;
  blurb?: string;
  canEdit?: boolean;
  sharedWithCount?: number;
  shareToken?: string;
  owner?: AthleteSearchResult;
  copy_folder_id?: number;
};

export type DuplicateWorkoutsDto = {
  numCopies?: number;
  weeksBetween?: number;
  workoutIds?: Array<number>;
};

export type DuplicateEventsDto = {
  numCopies?: number;
  weeksBetween?: number;
  eventIds?: Array<number>;
};

export type ActivityId = {
  icu_athlete_id?: string;
  id?: string;
};

export type UploadResponse = {
  icu_athlete_id?: string;
  id?: string;
  activities?: Array<ActivityId>;
};

export type NewActivityMsg = {
  content?: string;
};

export type Chat = {
  id?: number;
  type?: "PRIVATE" | "GROUP" | "ACTIVITY";
  coaching_group?: Date;
  updated?: Date;
  name?: string;
  picture?: string;
  description?: string;
  url?: string;
  slug?: string;
  pub?: boolean;
  join_policy?: "OPEN" | "ASK" | "INVITE_ONLY";
  sidebar_logo?: string;
  sidebar_color?: string;
  sidebar_dark?: boolean;
  sidebar_top_color?: string;
  hide_members?: boolean;
  primary_group?: boolean;
  coins?: number;
  members?: Array<ChatMember>;
  athlete_id?: string;
  activity_id?: string;
  other_athlete_id?: string;
  other_athlete_sex?: string;
  follows_you?: string;
  you_follow?: string;
  role?: "MEMBER" | "FOLLOWER" | "COACH" | "ADMIN";
  new_message_count?: number;
  kicked?: Date;
  kicked_by_id?: string;
  last_seen_message_id?: bigint;
  mute_until?: Date;
  sharedFolders?: Array<Folder>;
};

export type ChatMember = {
  athlete_id?: string;
  name?: string;
  profile_medium?: string;
  role?: "MEMBER" | "FOLLOWER" | "COACH" | "ADMIN";
  coach?: boolean;
  plan?: "FREE" | "PREMIUM" | "SUPPORTER" | "WHITELABEL";
  accepted_coaching_group?: Date;
};

export type NewMsg = {
  id?: bigint;
  new_chat?: Chat;
};

export type PaceDistancesDto = {
  distances?: Array<number>;
  defaults?: Array<number>;
};

export type WeatherDto = {
  forecasts?: Array<Forecast>;
};

export type RouteSimilarity = {
  route?: AthleteRoute;
  route_distance?: number;
  route_activity_count?: number;
  other?: AthleteRoute;
  other_distance?: number;
  other_activity_count?: number;
  similarity?: number;
  bounds?: Array<Array<number>>;
};

export type WithCount = {
  athlete_id?: string;
  route_id?: bigint;
  name?: string;
  rename_activities?: boolean;
  commute?: boolean;
  tags?: Array<string>;
  description?: string;
  replaced_by_route_id?: bigint;
  latlngs?: Array<Array<number>>;
  distance?: number;
  activity_count?: number;
  most_recent_id?: string;
  most_recent_start_date_local?: string;
  most_recent_type?: string;
};

export type AthleteProfile = {
  athlete?: AthleteSearchResult;
  sharedFolders?: Array<Folder>;
  customItems?: Array<CustomItem>;
};

export type PowerHrCurve = {
  athleteId?: string;
  start?: string;
  end?: string;
  minWatts?: number;
  maxWatts?: number;
  bucketSize?: number;
  bpm?: Array<number>;
  cadence?: Array<number>;
  minutes?: Array<number>;
  lthr?: number;
  max_hr?: number;
  ftp?: number;
};

export type DataCurve = {
  id?: string;
  after_kj?: number;
  filters?: Array<ActivityFilter>;
  label?: string;
  filter_label?: string;
  percentile?: number;
  start_date_local?: string;
  end_date_local?: string;
  days?: number;
  moving_time?: number;
  training_load?: number;
  weight?: number;
  secs?: Array<number>;
  distance?: Array<number>;
  values?: Array<number>;
  submax_values?: Array<Array<number>>;
  submax_activity_id?: Array<Array<string>>;
  start_index?: Array<number>;
  end_index?: Array<number>;
  activity_id?: Array<string>;
};

export type DataCurveSetPowerCurve = {
  list?: Array<DataCurve>;
  activities?: {
    [key: string]: Activity;
  };
};

export type DataCurveSetPaceCurve = {
  list?: Array<DataCurve>;
  activities?: {
    [key: string]: Activity;
  };
};

export type DataCurveSetHrCurve = {
  list?: Array<DataCurve>;
  activities?: {
    [key: string]: Activity;
  };
};

export type GearStats = {
  distance?: number;
  elapsed_time?: number;
  moving_time?: number;
  activities?: number;
};

export type CategorySummary = {
  count?: number;
  time?: number;
  moving_time?: number;
  elapsed_time?: number;
  calories?: number;
  total_elevation_gain?: number;
  training_load?: number;
  srpe?: number;
  distance?: number;
  eftp?: number;
  eftpPerKg?: number;
  category?:
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other";
};

export type SummaryWithCats = {
  count?: number;
  time?: number;
  moving_time?: number;
  elapsed_time?: number;
  calories?: number;
  total_elevation_gain?: number;
  training_load?: number;
  srpe?: number;
  distance?: number;
  eftp?: number;
  eftpPerKg?: number;
  date?: string;
  athlete_id?: string;
  athlete_name?: string;
  email?: string;
  external_id?: string;
  fitness?: number;
  fatigue?: number;
  form?: number;
  rampRate?: number;
  weight?: number;
  timeInZones?: Array<number>;
  timeInZonesTot?: number;
  byCategory?: Array<CategorySummary>;
  mostRecentWellnessId?: string;
};

export type ActivityPowerCurve = {
  id?: string;
  start_date_local?: string;
  weight?: number;
  watts?: Array<number>;
};

export type ActivityPowerCurvePayload = {
  after_kj?: number;
  secs?: Array<number>;
  curves?: Array<ActivityPowerCurve>;
};

export type ActivityHrCurve = {
  id?: string;
  start_date_local?: string;
  weight?: number;
  bpm?: Array<number>;
};

export type ActivityHrCurvePayload = {
  secs?: Array<number>;
  curves?: Array<ActivityHrCurve>;
};

export type ActivitySearchResult = {
  id?: string;
  name?: string;
  start_date_local?: string;
  type?: string;
  race?: boolean;
  distance?: number;
  moving_time?: number;
  tags?: Array<string>;
  description?: string;
};

export type WithSportSettings = {
  id?: string;
  name?: string;
  firstname?: string;
  lastname?: string;
  profile_medium?: string;
  measurement_preference?: string;
  weight_pref_lb?: boolean;
  fahrenheit?: boolean;
  wind_speed?: "MPS" | "KNOTS" | "KMH" | "MPH" | "BFT";
  rain?: "MM" | "INCHES";
  weight?: number;
  email?: string;
  sex?: string;
  city?: string;
  state?: string;
  country?: string;
  bikes?: Array<StravaGear>;
  shoes?: Array<StravaGear>;
  timezone?: string;
  locale?: string;
  visibility?: "PRIVATE" | "PUBLIC" | "HIDDEN";
  icu_resting_hr?: number;
  icu_weight?: number;
  icu_weight_sync?: "NONE" | "STRAVA";
  icu_last_seen?: Date;
  icu_activated?: Date;
  icu_queue_pos?: number;
  icu_admin?: boolean;
  icu_friend_invite_token?: string;
  icu_permission?: "NONE" | "READ" | "WRITE";
  icu_effort_secs?: Array<number>;
  icu_coach?: boolean;
  bio?: string;
  website?: string;
  icu_date_of_birth?: string;
  icu_api_key?: string;
  icu_type_settings?: Array<Settings>;
  icu_form_as_percent?: boolean;
  icu_mmp_days?: number;
  icu_wellness_prompt?: boolean;
  icu_wellness_keys?: Array<string>;
  icu_track_menstrual_cycle?: boolean;
  icu_menstrual_cycle_perm?: "NONE" | "READ" | "WRITE";
  coach_ticks?: Array<CoachTick>;
  icu_garmin_health?: boolean;
  icu_garmin_training?: boolean;
  icu_garmin_sync_activities?: boolean;
  garmin_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  garmin_sync_after?: Date;
  icu_garmin_download_wellness?: boolean;
  icu_garmin_upload_workouts?: boolean;
  icu_garmin_outdoor_power_range?: number;
  icu_garmin_hr_range?: number;
  garmin_pace_range?: number;
  garmin_power_target?:
    | "POWER_LAP"
    | "POWER"
    | "POWER_3S"
    | "POWER_10S"
    | "POWER_30S";
  icu_garmin_last_upload?: Date;
  icu_garmin_upload_filters?: Array<ActivityFilter>;
  icu_garmin_wellness_keys?: Array<string>;
  open_step_duration?: number;
  polar_scope?: string;
  polar_sync_activities?: boolean;
  polar_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  polar_download_wellness?: boolean;
  polar_wellness_keys?: Array<string>;
  suunto_scope?: string;
  suunto_user_id?: string;
  suunto_sync_activities?: boolean;
  suunto_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  suunto_upload_workouts?: boolean;
  suunto_outdoor_power_range?: number;
  suunto_hr_range?: number;
  suunto_pace_range?: number;
  suunto_last_upload?: Date;
  suunto_upload_filters?: Array<ActivityFilter>;
  suunto_download_wellness?: boolean;
  coros_user_id?: string;
  coros_sync_activities?: boolean;
  coros_upload_workouts?: boolean;
  coros_download_wellness?: boolean;
  coros_last_upload?: Date;
  zepp_user_id?: string;
  zepp_sync_activities?: boolean;
  zepp_upload_workouts?: boolean;
  zepp_download_wellness?: boolean;
  wahoo_user_id?: string;
  wahoo_sync_activities?: boolean;
  wahoo_upload_workouts?: boolean;
  zwift_user_id?: string;
  zwift_sync_activities?: boolean;
  zwift_upload_workouts?: boolean;
  dropbox_scope?: string;
  oura_scope?: string;
  oura_wellness_keys?: Array<string>;
  whoop_scope?: string;
  whoop_wellness_keys?: Array<string>;
  google_scope?: string;
  google_wellness_keys?: Array<string>;
  icu_email_verified?: boolean;
  icu_email_disabled?: string;
  icu_send_achievements?: boolean;
  icu_send_newsletter?: boolean;
  icu_send_private_chat?: boolean;
  icu_send_private_msg?: boolean;
  icu_send_follow_req?: boolean;
  icu_send_group_chat?: boolean;
  icu_send_group_msg?: boolean;
  icu_send_activity_chat?: boolean;
  icu_send_followed_activity_chat?: boolean;
  icu_send_coached_activity_chat?: boolean;
  icu_send_activity_msg?: boolean;
  icu_send_coach_me_req?: boolean;
  icu_send_gear_alerts?: boolean;
  icu_send_plan_for_week?: boolean;
  include_descr_in_plan_for_week?: boolean;
  icu_send_followed_new_activity?: boolean;
  icu_send_coached_new_activity?: boolean;
  icu_send_coach_tick?: boolean;
  strava_allowed?: boolean;
  strava_id?: number;
  scope?: string;
  strava_sync_activities?: boolean;
  strava_sync_activity_types?: Array<
    | "Ride"
    | "Run"
    | "Swim"
    | "WeightTraining"
    | "Hike"
    | "Walk"
    | "AlpineSki"
    | "BackcountrySki"
    | "Badminton"
    | "Canoeing"
    | "Crossfit"
    | "EBikeRide"
    | "EMountainBikeRide"
    | "Elliptical"
    | "Golf"
    | "GravelRide"
    | "TrackRide"
    | "Handcycle"
    | "HighIntensityIntervalTraining"
    | "Hockey"
    | "IceSkate"
    | "InlineSkate"
    | "Kayaking"
    | "Kitesurf"
    | "MountainBikeRide"
    | "NordicSki"
    | "OpenWaterSwim"
    | "Padel"
    | "Pilates"
    | "Pickleball"
    | "Racquetball"
    | "Rugby"
    | "RockClimbing"
    | "RollerSki"
    | "Rowing"
    | "Sail"
    | "Skateboard"
    | "Snowboard"
    | "Snowshoe"
    | "Soccer"
    | "Squash"
    | "StairStepper"
    | "StandUpPaddling"
    | "Surfing"
    | "TableTennis"
    | "Tennis"
    | "TrailRun"
    | "Transition"
    | "Velomobile"
    | "VirtualRide"
    | "VirtualRow"
    | "VirtualRun"
    | "WaterSport"
    | "Wheelchair"
    | "Windsurf"
    | "Workout"
    | "Yoga"
    | "Other"
  >;
  strava_sync_other_activities?: boolean;
  ignore_strava_gear?: boolean;
  update_strava_name?: boolean;
  add_weather_to_strava_descr?: boolean;
  height?: number;
  height_units?: "CM" | "FEET";
  plan?: "FREE" | "PREMIUM" | "SUPPORTER" | "WHITELABEL";
  plan_expires?: Date;
  trial_end_date?: Date;
  sponsored_by_chat_id?: number;
  has_password?: boolean;
  beta_user?: boolean;
  currency?: string;
  training_plan_id?: number;
  training_plan_start_date?: string;
  strava_authorized?: boolean;
  sportSettings?: Array<SportSettings>;
  custom_items?: Array<CustomItem>;
};

export type ActivityMini = {
  id?: string;
  start_date_local?: string;
  type?: string;
  name?: string;
};

export type ActivityWeatherSummary = {
  start_index?: number;
  end_index?: number;
  start_secs?: number;
  end_secs?: number;
  moving_time?: number;
  whole_activity?: boolean;
  wind_speed?: WindRose;
  wind_gust?: WindRose;
  apparent_wind_speed?: WindRose;
  apparent_wind_gust?: WindRose;
  average_temp?: number;
  min_temp?: number;
  max_temp?: number;
  average_weather_temp?: number;
  min_weather_temp?: number;
  max_weather_temp?: number;
  average_feels_like?: number;
  min_feels_like?: number;
  max_feels_like?: number;
  average_wind_speed?: number;
  min_wind_speed?: number;
  max_wind_speed?: number;
  average_wind_gust?: number;
  min_wind_gust?: number;
  max_wind_gust?: number;
  prevailing_wind_deg?: number;
  average_yaw?: number;
  headwind_percent?: number;
  tailwind_percent?: number;
  max_rain?: number;
  max_showers?: number;
  max_snow?: number;
  average_clouds?: number;
  description?: string;
};

export type WindRose = {
  avg_speed?: Array<number>;
  count?: Array<number>;
};

export type Plot = {
  max_bpm?: number;
  min_bpm?: number;
  secs?: Array<number>;
  cumulative_secs?: Array<number>;
};

export type ActivityStream = {
  type?: string;
  name?: string;
  data?: {
    [key: string]: unknown;
  };
  data2?: {
    [key: string]: unknown;
  };
  valueTypeIsArray?: boolean;
  anomalies?: Array<Anomaly>;
  custom?: boolean;
};

export type Anomaly = {
  start_index?: number;
  end_index?: number;
  value?: number;
  valueEnd?: number;
};

export type IcuSegment = {
  id?: bigint;
  start_index?: number;
  end_index?: number;
  name?: string;
  segment_id?: bigint;
  starred?: boolean;
};

export type Bucket = {
  start?: number;
  secs?: number;
  movingSecs?: number;
  watts?: number;
  hr?: number;
  cadence?: number;
};

export type Curve = {
  id?: string;
  coefficients?: Array<number>;
  r2?: number;
};

export type PowerVsHrPlot = {
  bucketSize?: number;
  warmup?: number;
  cooldown?: number;
  elapsedTime?: number;
  hrLag?: number;
  powerHr?: number;
  powerHrFirst?: number;
  powerHrSecond?: number;
  decoupling?: number;
  powerHrZ2?: number;
  medianCadenceZ2?: number;
  avgCadenceZ2?: number;
  hrZ2BucketCount?: number;
  start?: number;
  mid?: number;
  end?: number;
  series?: Array<Bucket>;
  curves?: Array<Curve>;
  ratioCoefficients?: Array<number>;
};

export type PowerCurve = {
  id?: string;
  after_kj?: number;
  filters?: Array<ActivityFilter>;
  label?: string;
  filter_label?: string;
  percentile?: number;
  start_date_local?: string;
  end_date_local?: string;
  days?: number;
  moving_time?: number;
  training_load?: number;
  weight?: number;
  secs?: Array<number>;
  values?: Array<number>;
  submax_values?: Array<Array<number>>;
  submax_activity_id?: Array<Array<string>>;
  start_index?: Array<number>;
  end_index?: Array<number>;
  activity_id?: Array<string>;
  watts_per_kg?: Array<number>;
  wkg_activity_id?: Array<string>;
  submax_watts_per_kg?: Array<Array<number>>;
  submax_wkg_activity_id?: Array<Array<string>>;
  powerModels?: Array<PowerModel>;
  ranks?: {
    [key: string]: Rank;
  };
  mapPlot?: Plot;
  stream_type?: string;
  stream_name?: string;
  watts?: Array<number>;
  vo2max_5m?: number;
  compound_score_5m?: number;
};

export type Rank = {
  position?: {
    [key: string]: number;
  };
  watts?: {
    [key: string]: number;
  };
};

export type PaceCurve = {
  id?: string;
  filters?: Array<ActivityFilter>;
  label?: string;
  filter_label?: string;
  percentile?: number;
  start_date_local?: string;
  end_date_local?: string;
  days?: number;
  moving_time?: number;
  training_load?: number;
  weight?: number;
  distance?: Array<number>;
  values?: Array<number>;
  submax_values?: Array<Array<number>>;
  submax_activity_id?: Array<Array<string>>;
  start_index?: Array<number>;
  end_index?: Array<number>;
  activity_id?: Array<string>;
  type?: "POWER" | "HR" | "PACE" | "GAP";
  paceModels?: Array<PaceModel>;
};

export type PaceModel = {
  type?: "CS";
  criticalSpeed?: number;
  dPrime?: number;
  r2?: number;
  inputPointIndexes?: Array<number>;
};

export type Message = {
  id?: bigint;
  athlete_id?: string;
  name?: string;
  created?: Date;
  type?:
    | "TEXT"
    | "FOLLOW_REQ"
    | "COACH_REQ"
    | "COACH_ME_REQ"
    | "ACTIVITY"
    | "NOTE"
    | "JOIN_REQ"
    | "ACCEPT_COACHING_GROUP";
  content?: string;
  activity_id?: string;
  start_index?: number;
  end_index?: number;
  answer?: string;
  activity?: Activity;
  attachment_url?: string;
  attachment_mime_type?: string;
  deleted?: Date;
  deleted_by_id?: string;
  join_group_id?: number;
  accept_coaching_group_id?: number;
  seen?: boolean;
};

export type ActivityWeather = {
  points?: Array<WeatherPoint>;
  closest_points?: Array<Closest>;
};

export type Closest = {
  start_secs?: number;
  p1_index?: number;
  p2_index?: number;
  p3_index?: number;
};

export type MapData = {
  bounds?: Array<Array<number>>;
  latlngs?: Array<Array<number>>;
  route?: AthleteRoute;
  weather?: ActivityWeather;
};

export type Time = {
  start_secs?: number;
  end_secs?: number;
  index?: number;
  temp?: number;
  feels_like?: number;
  humidity?: number;
  wind_speed?: number;
  wind_deg?: number;
  wind_gust?: number;
  rain?: number;
  showers?: number;
  snow?: number;
  clouds?: number;
  pressure?: number;
  weather_code?: number;
};

export type WeatherPoint = {
  latitude?: number;
  longitude?: number;
  times?: Array<Time>;
};

export type HrLoadModel = {
  type?: "AVG_HR" | "HR_ZONES" | "HRSS";
  icu_training_load?: number;
  trainingDataCount?: number;
};

export type HrCurve = {
  id?: string;
  filters?: Array<ActivityFilter>;
  label?: string;
  filter_label?: string;
  percentile?: number;
  start_date_local?: string;
  end_date_local?: string;
  days?: number;
  moving_time?: number;
  training_load?: number;
  weight?: number;
  secs?: Array<number>;
  values?: Array<number>;
  submax_values?: Array<Array<number>>;
  submax_activity_id?: Array<Array<string>>;
  start_index?: Array<number>;
  end_index?: Array<number>;
  activity_id?: Array<string>;
};

export type BestEfforts = {
  efforts?: Array<Effort>;
};

export type Effort = {
  start_index?: number;
  end_index?: number;
  average?: number;
  duration?: number;
  distance?: number;
};

export type ActivityWithIntervals = {
  id?: string;
  start_date_local?: string;
  type?: string;
  icu_ignore_time?: boolean;
  icu_pm_cp?: number;
  icu_pm_w_prime?: number;
  icu_pm_p_max?: number;
  icu_pm_ftp?: number;
  icu_pm_ftp_secs?: number;
  icu_pm_ftp_watts?: number;
  icu_ignore_power?: boolean;
  icu_rolling_cp?: number;
  icu_rolling_w_prime?: number;
  icu_rolling_p_max?: number;
  icu_rolling_ftp?: number;
  icu_rolling_ftp_delta?: number;
  icu_training_load?: number;
  icu_atl?: number;
  icu_ctl?: number;
  paired_event_id?: number;
  icu_ftp?: number;
  icu_joules?: number;
  icu_recording_time?: number;
  elapsed_time?: number;
  icu_weighted_avg_watts?: number;
  carbs_used?: number;
  name?: string;
  description?: string;
  start_date?: string;
  distance?: number;
  icu_distance?: number;
  moving_time?: number;
  coasting_time?: number;
  total_elevation_gain?: number;
  total_elevation_loss?: number;
  timezone?: string;
  trainer?: boolean;
  sub_type?: "NONE" | "COMMUTE" | "WARMUP" | "COOLDOWN" | "RACE";
  commute?: boolean;
  race?: boolean;
  max_speed?: number;
  average_speed?: number;
  device_watts?: boolean;
  has_heartrate?: boolean;
  max_heartrate?: number;
  average_heartrate?: number;
  average_cadence?: number;
  calories?: number;
  average_temp?: number;
  min_temp?: number;
  max_temp?: number;
  avg_lr_balance?: number;
  gap?: number;
  gap_model?: "NONE" | "STRAVA_RUN";
  use_elevation_correction?: boolean;
  gear?: StravaGear;
  perceived_exertion?: number;
  device_name?: string;
  power_meter?: string;
  power_meter_serial?: string;
  power_meter_battery?: string;
  crank_length?: number;
  external_id?: string;
  file_sport_index?: number;
  file_type?: string;
  icu_athlete_id?: string;
  created?: Date;
  icu_sync_date?: Date;
  analyzed?: Date;
  icu_w_prime?: number;
  threshold_pace?: number;
  icu_hr_zones?: Array<number>;
  pace_zones?: Array<number>;
  lthr?: number;
  icu_resting_hr?: number;
  icu_weight?: number;
  icu_power_zones?: Array<number>;
  icu_sweet_spot_min?: number;
  icu_sweet_spot_max?: number;
  icu_power_spike_threshold?: number;
  trimp?: number;
  icu_warmup_time?: number;
  icu_cooldown_time?: number;
  icu_chat_id?: number;
  icu_ignore_hr?: boolean;
  ignore_velocity?: boolean;
  ignore_pace?: boolean;
  ignore_parts?: Array<Ignore>;
  icu_training_load_data?: number;
  interval_summary?: Array<string>;
  skyline_chart_bytes?: Array<string>;
  stream_types?: Array<string>;
  has_weather?: boolean;
  has_segments?: boolean;
  power_field_names?: Array<string>;
  power_field?: string;
  icu_zone_times?: Array<ZoneTime>;
  icu_hr_zone_times?: Array<number>;
  pace_zone_times?: Array<number>;
  gap_zone_times?: Array<number>;
  use_gap_zone_times?: boolean;
  tiz_order?:
    | "POWER_HR_PACE"
    | "POWER_PACE_HR"
    | "HR_POWER_PACE"
    | "HR_PACE_POWER"
    | "PACE_POWER_HR"
    | "PACE_HR_POWER";
  polarization_index?: number;
  icu_achievements?: Array<IcuAchievement>;
  icu_intervals_edited?: boolean;
  lock_intervals?: boolean;
  icu_lap_count?: number;
  icu_joules_above_ftp?: number;
  icu_max_wbal_depletion?: number;
  icu_hrr?: HrRecovery;
  icu_sync_error?: string;
  icu_color?: string;
  icu_power_hr_z2?: number;
  icu_power_hr_z2_mins?: number;
  icu_cadence_z2?: number;
  icu_rpe?: number;
  feel?: number;
  kg_lifted?: number;
  decoupling?: number;
  icu_median_time_delta?: number;
  p30s_exponent?: number;
  workout_shift_secs?: number;
  strava_id?: string;
  lengths?: number;
  pool_length?: number;
  compliance?: number;
  coach_tick?: number;
  source?:
    | "STRAVA"
    | "UPLOAD"
    | "MANUAL"
    | "GARMIN_CONNECT"
    | "OAUTH_CLIENT"
    | "DROPBOX"
    | "POLAR"
    | "SUUNTO"
    | "COROS"
    | "WAHOO"
    | "ZWIFT"
    | "ZEPP";
  oauth_client_id?: number;
  oauth_client_name?: string;
  average_altitude?: number;
  min_altitude?: number;
  max_altitude?: number;
  power_load?: number;
  hr_load?: number;
  pace_load?: number;
  hr_load_type?: "AVG_HR" | "HR_ZONES" | "HRSS";
  pace_load_type?: "SWIM" | "RUN";
  tags?: Array<string>;
  attachments?: Array<Attachment>;
  recording_stops?: Array<number>;
  average_weather_temp?: number;
  min_weather_temp?: number;
  max_weather_temp?: number;
  average_feels_like?: number;
  min_feels_like?: number;
  max_feels_like?: number;
  average_wind_speed?: number;
  average_wind_gust?: number;
  prevailing_wind_deg?: number;
  headwind_percent?: number;
  tailwind_percent?: number;
  average_clouds?: number;
  max_rain?: number;
  max_snow?: number;
  carbs_ingested?: number;
  route_id?: bigint;
  pace?: number;
  athlete_max_hr?: number;
  group?: string;
  icu_intensity?: number;
  icu_efficiency_factor?: number;
  icu_power_hr?: number;
  session_rpe?: number;
  average_stride?: number;
  icu_average_watts?: number;
  icu_variability_index?: number;
  icu_intervals?: Array<Interval>;
  icu_groups?: Array<IntervalGroup>;
};

export type Hidden = {
  id?: string;
  icu_athlete_id?: string;
  start_date_local?: string;
  source?:
    | "STRAVA"
    | "UPLOAD"
    | "MANUAL"
    | "GARMIN_CONNECT"
    | "OAUTH_CLIENT"
    | "DROPBOX"
    | "POLAR"
    | "SUUNTO"
    | "COROS"
    | "WAHOO"
    | "ZWIFT"
    | "ZEPP";
  _note?: string;
};

export type DeleteSharedEventData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/api/v1/shared-event/{id}";
};

export type DeleteSharedEventResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetSharedEventData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/api/v1/shared-event/{id}";
};

export type GetSharedEventResponses = {
  /**
   * OK
   */
  200: SharedEvent;
};

export type GetSharedEventResponse =
  GetSharedEventResponses[keyof GetSharedEventResponses];

export type UpdateSharedEventData = {
  body: SharedEvent;
  path: {
    id: number;
  };
  query?: never;
  url: "/api/v1/shared-event/{id}";
};

export type UpdateSharedEventResponses = {
  /**
   * OK
   */
  200: SharedEvent;
};

export type UpdateSharedEventResponse =
  UpdateSharedEventResponses[keyof UpdateSharedEventResponses];

export type DeleteWorkoutData = {
  body?: never;
  path: {
    id: string;
    workoutId: number;
  };
  query?: {
    others?: boolean;
  };
  url: "/api/v1/athlete/{id}/workouts/{workoutId}";
};

export type DeleteWorkoutResponses = {
  /**
   * OK
   */
  200: Array<number>;
};

export type DeleteWorkoutResponse =
  DeleteWorkoutResponses[keyof DeleteWorkoutResponses];

export type ShowWorkoutData = {
  body?: never;
  path: {
    id: string;
    workoutId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workouts/{workoutId}";
};

export type ShowWorkoutResponses = {
  /**
   * OK
   */
  200: Workout;
};

export type ShowWorkoutResponse =
  ShowWorkoutResponses[keyof ShowWorkoutResponses];

export type UpdateWorkoutData = {
  body: WorkoutEx;
  path: {
    id: string;
    workoutId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workouts/{workoutId}";
};

export type UpdateWorkoutResponses = {
  /**
   * OK
   */
  200: Workout;
};

export type UpdateWorkoutResponse =
  UpdateWorkoutResponses[keyof UpdateWorkoutResponses];

export type GetRecordData = {
  body?: never;
  path: {
    id: string;
    date: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/wellness/{date}";
};

export type GetRecordResponses = {
  /**
   * OK
   */
  200: Wellness;
};

export type GetRecordResponse = GetRecordResponses[keyof GetRecordResponses];

export type UpdateWellnessData = {
  body: Wellness;
  path: {
    id: string;
    date: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/wellness/{date}";
};

export type UpdateWellnessResponses = {
  /**
   * OK
   */
  200: Wellness;
};

export type UpdateWellnessResponse =
  UpdateWellnessResponses[keyof UpdateWellnessResponses];

export type UpdateWellnessBulkData = {
  body: Array<Wellness>;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/wellness-bulk";
};

export type UpdateWellnessBulkResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UploadWellnessData = {
  body?: {
    file: Blob | File;
  };
  path: {
    id: string;
  };
  query?: {
    ignoreMissingFields?: boolean;
  };
  url: "/api/v1/athlete/{id}/wellness";
};

export type UploadWellnessResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type UploadWellnessResponse =
  UploadWellnessResponses[keyof UploadWellnessResponses];

export type UpdateWellness1Data = {
  body: Wellness;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/wellness";
};

export type UpdateWellness1Responses = {
  /**
   * OK
   */
  200: Wellness;
};

export type UpdateWellness1Response =
  UpdateWellness1Responses[keyof UpdateWellness1Responses];

export type GetWeatherConfigData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/weather-config";
};

export type GetWeatherConfigResponses = {
  /**
   * OK
   */
  200: WeatherConfig;
};

export type GetWeatherConfigResponse =
  GetWeatherConfigResponses[keyof GetWeatherConfigResponses];

export type UpdateWeatherConfigData = {
  body: WeatherConfig;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/weather-config";
};

export type UpdateWeatherConfigResponses = {
  /**
   * OK
   */
  200: WeatherConfig;
};

export type UpdateWeatherConfigResponse =
  UpdateWeatherConfigResponses[keyof UpdateWeatherConfigResponses];

export type GetAthleteTrainingPlanData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/training-plan";
};

export type GetAthleteTrainingPlanResponses = {
  /**
   * OK
   */
  200: AthleteTrainingPlan;
};

export type GetAthleteTrainingPlanResponse =
  GetAthleteTrainingPlanResponses[keyof GetAthleteTrainingPlanResponses];

export type UpdateAthletePlanData = {
  body: AthleteTrainingPlanUpdate;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/training-plan";
};

export type UpdateAthletePlanResponses = {
  /**
   * OK
   */
  200: AthleteTrainingPlan;
};

export type UpdateAthletePlanResponse =
  UpdateAthletePlanResponses[keyof UpdateAthletePlanResponses];

export type GetAthleteRouteData = {
  body?: never;
  path: {
    id: string;
    route_id: bigint;
  };
  query?: {
    /**
     * Include latlngs for the route GPS path
     */
    includePath?: boolean;
  };
  url: "/api/v1/athlete/{id}/routes/{route_id}";
};

export type GetAthleteRouteResponses = {
  /**
   * OK
   */
  200: AthleteRoute;
};

export type GetAthleteRouteResponse =
  GetAthleteRouteResponses[keyof GetAthleteRouteResponses];

export type UpdateAthleteRouteData = {
  body: AthleteRoute;
  path: {
    id: string;
    route_id: bigint;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/routes/{route_id}";
};

export type UpdateAthleteRouteResponses = {
  /**
   * OK
   */
  200: AthleteRoute;
};

export type UpdateAthleteRouteResponse =
  UpdateAthleteRouteResponses[keyof UpdateAthleteRouteResponses];

export type DeleteReminderData = {
  body?: never;
  path: {
    id: string;
    gearId: string;
    reminderId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}";
};

export type DeleteReminderResponses = {
  /**
   * OK
   */
  200: Gear;
};

export type DeleteReminderResponse =
  DeleteReminderResponses[keyof DeleteReminderResponses];

export type UpdateReminderData = {
  body: GearReminder;
  path: {
    id: string;
    gearId: string;
    reminderId: number;
  };
  query: {
    reset: boolean;
    snoozeDays: number;
  };
  url: "/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}";
};

export type UpdateReminderResponses = {
  /**
   * OK
   */
  200: Gear;
};

export type UpdateReminderResponse =
  UpdateReminderResponses[keyof UpdateReminderResponses];

export type DeleteGearData = {
  body?: never;
  path: {
    id: string;
    gearId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}";
};

export type DeleteGearResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateGearData = {
  body: Gear;
  path: {
    id: string;
    gearId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}";
};

export type UpdateGearResponses = {
  /**
   * OK
   */
  200: Gear;
};

export type UpdateGearResponse = UpdateGearResponses[keyof UpdateGearResponses];

export type UpdatePlanWorkoutsData = {
  body: Workout;
  path: {
    id: string;
    folderId: number;
  };
  query: {
    oldest: number;
    newest: number;
  };
  url: "/api/v1/athlete/{id}/folders/{folderId}/workouts";
};

export type UpdatePlanWorkoutsResponses = {
  /**
   * OK
   */
  200: Array<Workout>;
};

export type UpdatePlanWorkoutsResponse =
  UpdatePlanWorkoutsResponses[keyof UpdatePlanWorkoutsResponses];

export type ListFolderSharedWithData = {
  body?: never;
  path: {
    id: string;
    folderId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders/{folderId}/shared-with";
};

export type ListFolderSharedWithResponses = {
  /**
   * OK
   */
  200: Array<SharedWith>;
};

export type ListFolderSharedWithResponse =
  ListFolderSharedWithResponses[keyof ListFolderSharedWithResponses];

export type UpdateFolderSharedWithData = {
  body: Array<SharedWith>;
  path: {
    id: string;
    folderId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders/{folderId}/shared-with";
};

export type UpdateFolderSharedWithResponses = {
  /**
   * OK
   */
  200: Array<SharedWith>;
};

export type UpdateFolderSharedWithResponse =
  UpdateFolderSharedWithResponses[keyof UpdateFolderSharedWithResponses];

export type DeleteFolderData = {
  body?: never;
  path: {
    id: string;
    folderId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders/{folderId}";
};

export type DeleteFolderResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

export type DeleteFolderResponse =
  DeleteFolderResponses[keyof DeleteFolderResponses];

export type UpdateFolderData = {
  body: Folder;
  path: {
    id: string;
    folderId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders/{folderId}";
};

export type UpdateFolderResponses = {
  /**
   * OK
   */
  200: Folder;
};

export type UpdateFolderResponse =
  UpdateFolderResponses[keyof UpdateFolderResponses];

export type DeleteEventData = {
  body?: never;
  path: {
    id: string;
    eventId: number;
  };
  query?: {
    /**
     * If true then other events added at the same time are also deleted
     */
    others?: boolean;
    /**
     * Do not delete other events on the calendar before this local date (ISO-8601)
     */
    notBefore?: string;
  };
  url: "/api/v1/athlete/{id}/events/{eventId}";
};

export type DeleteEventResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

export type DeleteEventResponse =
  DeleteEventResponses[keyof DeleteEventResponses];

export type ShowEventData = {
  body?: never;
  path: {
    id: string;
    eventId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events/{eventId}";
};

export type ShowEventResponses = {
  /**
   * OK
   */
  200: Event;
};

export type ShowEventResponse = ShowEventResponses[keyof ShowEventResponses];

export type UpdateEventData = {
  body: EventEx;
  path: {
    id: string;
    eventId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events/{eventId}";
};

export type UpdateEventResponses = {
  /**
   * OK
   */
  200: Event;
};

export type UpdateEventResponse =
  UpdateEventResponses[keyof UpdateEventResponses];

export type DeleteEventsBulkData = {
  body: Array<DoomedEvent>;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events/bulk-delete";
};

export type DeleteEventsBulkResponses = {
  /**
   * OK
   */
  200: DeleteEventsResponse;
};

export type DeleteEventsBulkResponse =
  DeleteEventsBulkResponses[keyof DeleteEventsBulkResponses];

export type DeleteEventsData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Local date (ISO-8601) of oldest event to delete
     */
    oldest: string;
    /**
     * Local date (ISO-8601) of newest event to delete (inclusive, default is all future events)
     */
    newest?: string;
    /**
     * If provided only events created by this athlete (created_by_id field) are deleted
     */
    createdById?: string;
    /**
     * Comma separated list of event categories to delete (e.g. WORKOUT)
     */
    category: Array<string>;
  };
  url: "/api/v1/athlete/{id}/events";
};

export type DeleteEventsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type CreateEventData = {
  body: EventEx;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events";
};

export type CreateEventResponses = {
  /**
   * OK
   */
  200: Event;
};

export type CreateEventResponse =
  CreateEventResponses[keyof CreateEventResponses];

export type UpdateEventsData = {
  body: Event;
  path: {
    id: string;
  };
  query: {
    /**
     * Local date (ISO-8601) of oldest event to update
     */
    oldest: string;
    /**
     * Local date (ISO-8601) of newest event to update (inclusive)
     */
    newest: string;
  };
  url: "/api/v1/athlete/{id}/events";
};

export type UpdateEventsResponses = {
  /**
   * OK
   */
  200: Array<Event>;
};

export type UpdateEventsResponse =
  UpdateEventsResponses[keyof UpdateEventsResponses];

export type DeleteCustomItemData = {
  body?: never;
  path: {
    id: string;
    itemId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item/{itemId}";
};

export type DeleteCustomItemResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetCustomItemData = {
  body?: never;
  path: {
    id: string;
    itemId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item/{itemId}";
};

export type GetCustomItemResponses = {
  /**
   * OK
   */
  200: CustomItem;
};

export type GetCustomItemResponse =
  GetCustomItemResponses[keyof GetCustomItemResponses];

export type UpdateCustomItemData = {
  body: CustomItem;
  path: {
    id: string;
    itemId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item/{itemId}";
};

export type UpdateCustomItemResponses = {
  /**
   * OK
   */
  200: CustomItem;
};

export type UpdateCustomItemResponse =
  UpdateCustomItemResponses[keyof UpdateCustomItemResponses];

export type UpdateCustomItemIndexesData = {
  body: Array<CustomItem>;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item-indexes";
};

export type UpdateCustomItemIndexesResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ApplyCurrentPlanChangesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/apply-plan-changes";
};

export type ApplyCurrentPlanChangesResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

export type ApplyCurrentPlanChangesResponse =
  ApplyCurrentPlanChangesResponses[keyof ApplyCurrentPlanChangesResponses];

export type GetAthleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}";
};

export type GetAthleteResponses = {
  /**
   * OK
   */
  200: WithSportSettings;
};

export type GetAthleteResponse = GetAthleteResponses[keyof GetAthleteResponses];

export type UpdateAthleteData = {
  body: AthleteUpdateDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}";
};

export type UpdateAthleteResponses = {
  /**
   * OK
   */
  200: Athlete;
};

export type UpdateAthleteResponse =
  UpdateAthleteResponses[keyof UpdateAthleteResponses];

export type ApplyToActivitiesData = {
  body?: never;
  path: {
    athleteId: string;
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/apply";
};

export type ApplyToActivitiesResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type ApplyToActivitiesResponse =
  ApplyToActivitiesResponses[keyof ApplyToActivitiesResponses];

export type DeleteSettingsData = {
  body?: never;
  path: {
    athleteId: string;
    id: number;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}";
};

export type DeleteSettingsResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type DeleteSettingsResponse =
  DeleteSettingsResponses[keyof DeleteSettingsResponses];

export type GetSettings1Data = {
  body?: never;
  path: {
    athleteId: string;
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}";
};

export type GetSettings1Responses = {
  /**
   * OK
   */
  200: SportSettings;
};

export type GetSettings1Response =
  GetSettings1Responses[keyof GetSettings1Responses];

export type UpdateSettingsData = {
  body: SportSettings;
  path: {
    athleteId: string;
    id: string;
  };
  query: {
    recalcHrZones: boolean;
  };
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}";
};

export type UpdateSettingsResponses = {
  /**
   * OK
   */
  200: SportSettings;
};

export type UpdateSettingsResponse =
  UpdateSettingsResponses[keyof UpdateSettingsResponses];

export type ListSettingsData = {
  body?: never;
  path: {
    athleteId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings";
};

export type ListSettingsResponses = {
  /**
   * OK
   */
  200: Array<SportSettings>;
};

export type ListSettingsResponse =
  ListSettingsResponses[keyof ListSettingsResponses];

export type CreateSettingsData = {
  body: SportSettings;
  path: {
    athleteId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings";
};

export type CreateSettingsResponses = {
  /**
   * OK
   */
  200: SportSettings;
};

export type CreateSettingsResponse =
  CreateSettingsResponses[keyof CreateSettingsResponses];

export type UpdateSettingsMultiData = {
  body: Array<SportSettings>;
  path: {
    athleteId: string;
  };
  query: {
    recalcHrZones: boolean;
  };
  url: "/api/v1/athlete/{athleteId}/sport-settings";
};

export type UpdateSettingsMultiResponses = {
  /**
   * OK
   */
  200: Array<SportSettings>;
};

export type UpdateSettingsMultiResponse =
  UpdateSettingsMultiResponses[keyof UpdateSettingsMultiResponses];

export type UpdateAthletePlansData = {
  body: Array<AthleteTrainingPlanUpdate>;
  path?: never;
  query?: never;
  url: "/api/v1/athlete-plans";
};

export type UpdateAthletePlansResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: unknown;
  };
};

export type UpdateAthletePlansResponse =
  UpdateAthletePlansResponses[keyof UpdateAthletePlansResponses];

export type SplitIntervalData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Index to split interval at
     */
    splitAt: number;
  };
  url: "/api/v1/activity/{id}/split-interval";
};

export type SplitIntervalResponses = {
  /**
   * OK
   */
  200: IntervalsDto;
};

export type SplitIntervalResponse =
  SplitIntervalResponses[keyof SplitIntervalResponses];

export type UpdateIntervalData = {
  body: Interval;
  path: {
    id: string;
    intervalId: number;
  };
  query?: never;
  url: "/api/v1/activity/{id}/intervals/{intervalId}";
};

export type UpdateIntervalResponses = {
  /**
   * OK
   */
  200: IntervalsDto;
};

export type UpdateIntervalResponse =
  UpdateIntervalResponses[keyof UpdateIntervalResponses];

export type GetIntervalsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/intervals";
};

export type GetIntervalsResponses = {
  /**
   * OK
   */
  200: IntervalsDto;
};

export type GetIntervalsResponse =
  GetIntervalsResponses[keyof GetIntervalsResponses];

export type UpdateIntervalsData = {
  body: Array<Interval>;
  path: {
    id: string;
  };
  query?: {
    /**
     * Any existing intervals are replaced, otherwise a merge is done
     */
    all?: boolean;
  };
  url: "/api/v1/activity/{id}/intervals";
};

export type UpdateIntervalsResponses = {
  /**
   * OK
   */
  200: IntervalsDto;
};

export type UpdateIntervalsResponse =
  UpdateIntervalsResponses[keyof UpdateIntervalsResponses];

export type DeleteIntervalsData = {
  body: Array<Interval>;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/delete-intervals";
};

export type DeleteIntervalsResponses = {
  /**
   * OK
   */
  200: IntervalsDto;
};

export type DeleteIntervalsResponse =
  DeleteIntervalsResponses[keyof DeleteIntervalsResponses];

export type DeleteActivityData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}";
};

export type DeleteActivityResponses = {
  /**
   * OK
   */
  200: ActivityId;
};

export type DeleteActivityResponse =
  DeleteActivityResponses[keyof DeleteActivityResponses];

export type GetActivityData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Include interval data
     */
    intervals?: boolean;
  };
  url: "/api/v1/activity/{id}";
};

export type GetActivityResponses = {
  /**
   * default response
   */
  default: Activity | ActivityWithIntervals | Hidden;
};

export type GetActivityResponse =
  GetActivityResponses[keyof GetActivityResponses];

export type UpdateActivityData = {
  body: Activity;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}";
};

export type UpdateActivityResponses = {
  /**
   * OK
   */
  200: Activity;
};

export type UpdateActivityResponse =
  UpdateActivityResponses[keyof UpdateActivityResponses];

export type CreateSharedEventData = {
  body: SharedEvent;
  path?: never;
  query?: {
    linkToEventId?: number;
  };
  url: "/api/v1/shared-event";
};

export type CreateSharedEventResponses = {
  /**
   * OK
   */
  200: SharedEvent;
};

export type CreateSharedEventResponse =
  CreateSharedEventResponses[keyof CreateSharedEventResponses];

export type DownloadWorkoutData = {
  body: Workout;
  path: {
    ext: string;
  };
  query?: never;
  url: "/api/v1/download-workout{ext}";
};

export type DownloadWorkoutResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type CreateMultipleWorkoutsData = {
  body: Array<WorkoutEx>;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workouts/bulk";
};

export type CreateMultipleWorkoutsResponses = {
  /**
   * OK
   */
  200: Array<Workout>;
};

export type CreateMultipleWorkoutsResponse =
  CreateMultipleWorkoutsResponses[keyof CreateMultipleWorkoutsResponses];

export type ListWorkoutsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workouts";
};

export type ListWorkoutsResponses = {
  /**
   * OK
   */
  200: Array<Workout>;
};

export type ListWorkoutsResponse =
  ListWorkoutsResponses[keyof ListWorkoutsResponses];

export type CreateWorkoutData = {
  body: WorkoutEx;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workouts";
};

export type CreateWorkoutResponses = {
  /**
   * OK
   */
  200: Workout;
};

export type CreateWorkoutResponse =
  CreateWorkoutResponses[keyof CreateWorkoutResponses];

export type ReplaceGearData = {
  body: Gear;
  path: {
    id: string;
    gearId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}/replace";
};

export type ReplaceGearResponses = {
  /**
   * OK
   */
  200: Array<Gear>;
};

export type ReplaceGearResponse =
  ReplaceGearResponses[keyof ReplaceGearResponses];

export type CreateReminderData = {
  body: GearReminder;
  path: {
    id: string;
    gearId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}/reminder";
};

export type CreateReminderResponses = {
  /**
   * OK
   */
  200: Gear;
};

export type CreateReminderResponse =
  CreateReminderResponses[keyof CreateReminderResponses];

export type CreateGearData = {
  body: Gear;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear";
};

export type CreateGearResponses = {
  /**
   * OK
   */
  200: Gear;
};

export type CreateGearResponse = CreateGearResponses[keyof CreateGearResponses];

export type ImportWorkoutFileData = {
  body?: {
    file: Blob | File;
  };
  path: {
    id: string;
    folderId: number;
  };
  query: {
    athleteId?: string;
    type:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
  };
  url: "/api/v1/athlete/{id}/folders/{folderId}/import-workout";
};

export type ImportWorkoutFileResponses = {
  /**
   * OK
   */
  200: Workout;
};

export type ImportWorkoutFileResponse =
  ImportWorkoutFileResponses[keyof ImportWorkoutFileResponses];

export type ListFoldersData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders";
};

export type ListFoldersResponses = {
  /**
   * OK
   */
  200: Array<Folder>;
};

export type ListFoldersResponse =
  ListFoldersResponses[keyof ListFoldersResponses];

export type CreateFolderData = {
  body: CreateFolderDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/folders";
};

export type CreateFolderResponses = {
  /**
   * OK
   */
  200: Folder;
};

export type CreateFolderResponse =
  CreateFolderResponses[keyof CreateFolderResponses];

export type MarkEventAsDoneData = {
  body?: never;
  path: {
    id: string;
    eventId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events/{eventId}/mark-done";
};

export type MarkEventAsDoneResponses = {
  /**
   * OK
   */
  200: Activity;
};

export type MarkEventAsDoneResponse =
  MarkEventAsDoneResponses[keyof MarkEventAsDoneResponses];

export type CreateMultipleEventsData = {
  body: Array<EventEx>;
  path: {
    id: string;
  };
  query?: {
    /**
     * Update events with matching external_id and created by the same OAuth application instead of creating new ones
     */
    upsert?: boolean;
  };
  url: "/api/v1/athlete/{id}/events/bulk";
};

export type CreateMultipleEventsResponses = {
  /**
   * OK
   */
  200: Array<Event>;
};

export type CreateMultipleEventsResponse =
  CreateMultipleEventsResponses[keyof CreateMultipleEventsResponses];

export type DuplicateWorkoutsData = {
  body: DuplicateWorkoutsDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/duplicate-workouts";
};

export type DuplicateWorkoutsResponses = {
  /**
   * OK
   */
  200: Array<Workout>;
};

export type DuplicateWorkoutsResponse =
  DuplicateWorkoutsResponses[keyof DuplicateWorkoutsResponses];

export type DuplicateEventsData = {
  body: DuplicateEventsDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/duplicate-events";
};

export type DuplicateEventsResponses = {
  /**
   * OK
   */
  200: Array<Event>;
};

export type DuplicateEventsResponse =
  DuplicateEventsResponses[keyof DuplicateEventsResponses];

export type DownloadWorkoutForAthleteData = {
  body: Workout;
  path: {
    id: string;
    ext: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/download-workout{ext}";
};

export type DownloadWorkoutForAthleteResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type DownloadActivityFitFilesData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Include power data
     */
    power?: boolean;
    /**
     * Include heart rate data
     */
    hr?: boolean;
    /**
     * Activity id's to download
     */
    ids: Array<string>;
  };
  url: "/api/v1/athlete/{id}/download-fit-files";
};

export type DownloadActivityFitFilesResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateCustomItemImageData = {
  body?: {
    file: Blob | File;
  };
  path: {
    id: string;
    itemId: number;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item/{itemId}/image";
};

export type UpdateCustomItemImageResponses = {
  /**
   * OK
   */
  200: CustomItem;
};

export type UpdateCustomItemImageResponse =
  UpdateCustomItemImageResponses[keyof UpdateCustomItemImageResponses];

export type ListCustomItemsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item";
};

export type ListCustomItemsResponses = {
  /**
   * OK
   */
  200: Array<CustomItem>;
};

export type ListCustomItemsResponse =
  ListCustomItemsResponses[keyof ListCustomItemsResponses];

export type CreateCustomItemData = {
  body: CustomItem;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/custom-item";
};

export type CreateCustomItemResponses = {
  /**
   * OK
   */
  200: CustomItem;
};

export type CreateCustomItemResponse =
  CreateCustomItemResponses[keyof CreateCustomItemResponses];

export type CreateManualActivityData = {
  body: Activity;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/activities/manual";
};

export type CreateManualActivityResponses = {
  /**
   * OK
   */
  200: Activity;
};

export type CreateManualActivityResponse =
  CreateManualActivityResponses[keyof CreateManualActivityResponses];

export type ListActivitiesData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Local ISO-8601 date or date and time e.g. 2019-07-22T16:18:49 or 2019-07-22
     */
    oldest: string;
    /**
     * Local ISO-8601 date or date and time, defaults to now
     */
    newest?: string;
    /**
     * Only return activities on this route
     */
    route_id?: bigint;
    /**
     * Return at most this many activities
     */
    limit?: number;
  };
  url: "/api/v1/athlete/{id}/activities";
};

export type ListActivitiesResponses = {
  /**
   * OK
   */
  200: Array<Activity>;
};

export type ListActivitiesResponse =
  ListActivitiesResponses[keyof ListActivitiesResponses];

export type UploadActivityData = {
  body?: {
    /**
     * Activity file
     */
    file: Blob | File;
  };
  path: {
    id: string;
  };
  query?: {
    /**
     * Activity name
     */
    name?: string;
    /**
     * Activity description
     */
    description?: string;
    /**
     * ID of the activity on the system it came from
     */
    external_id?: string;
    /**
     * Workout to pair with activity
     */
    paired_event_id?: number;
  };
  url: "/api/v1/athlete/{id}/activities";
};

export type UploadActivityResponses = {
  /**
   * OK
   */
  200: UploadResponse;
};

export type UploadActivityResponse =
  UploadActivityResponses[keyof UploadActivityResponses];

export type ListActivityMessagesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    sinceId?: bigint;
    limit?: number;
  };
  url: "/api/v1/activity/{id}/messages";
};

export type ListActivityMessagesResponses = {
  /**
   * OK
   */
  200: Array<Message>;
};

export type ListActivityMessagesResponse =
  ListActivityMessagesResponses[keyof ListActivityMessagesResponses];

export type SendActivityMessageData = {
  body: NewActivityMsg;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/messages";
};

export type SendActivityMessageResponses = {
  /**
   * OK
   */
  200: NewMsg;
};

export type SendActivityMessageResponse =
  SendActivityMessageResponses[keyof SendActivityMessageResponses];

export type ListPaceDistancesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/pace_distances";
};

export type ListPaceDistancesResponses = {
  /**
   * OK
   */
  200: PaceDistancesDto;
};

export type ListPaceDistancesResponse =
  ListPaceDistancesResponses[keyof ListPaceDistancesResponses];

export type DownloadWorkoutsData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Format: zwo, mrc, erg or fit
     */
    ext: string;
    /**
     * Local date (ISO-8601) of oldest workout
     */
    oldest: string;
    /**
     * Local date (ISO-8601) of newest workout (inclusive)
     */
    newest: string;
    powerRange?: number;
    hrRange?: number;
    paceRange?: number;
    locale?: string;
  };
  url: "/api/v1/athlete/{id}/workouts.zip";
};

export type DownloadWorkoutsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ListTagsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/workout-tags";
};

export type ListTagsResponses = {
  /**
   * OK
   */
  200: Array<string>;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type ListWellnessRecordsData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    /**
     * Local date of oldest record (ISO-8601)
     */
    oldest?: string;
    /**
     * Local date of newest record (ISO-8601), inclusive
     */
    newest?: string;
    /**
     * Comma separated list of column names to include
     */
    cols?: Array<string>;
  };
  url: "/api/v1/athlete/{id}/wellness{ext}";
};

export type ListWellnessRecordsResponses = {
  /**
   * OK
   */
  200: Array<Wellness>;
};

export type ListWellnessRecordsResponse =
  ListWellnessRecordsResponses[keyof ListWellnessRecordsResponses];

export type GetForecastData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/weather-forecast";
};

export type GetForecastResponses = {
  /**
   * OK
   */
  200: WeatherDto;
};

export type GetForecastResponse =
  GetForecastResponses[keyof GetForecastResponses];

export type GetSettingsData = {
  body?: never;
  path: {
    id: string;
    deviceClass: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/settings/{deviceClass}";
};

export type GetSettingsResponses = {
  /**
   * OK
   */
  200: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

export type GetSettingsResponse =
  GetSettingsResponses[keyof GetSettingsResponses];

export type CheckMergeData = {
  body?: never;
  path: {
    id: string;
    route_id: bigint;
    other_id: bigint;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/routes/{route_id}/similarity/{other_id}";
};

export type CheckMergeResponses = {
  /**
   * OK
   */
  200: RouteSimilarity;
};

export type CheckMergeResponse = CheckMergeResponses[keyof CheckMergeResponses];

export type ListAthleteRoutesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/routes";
};

export type ListAthleteRoutesResponses = {
  /**
   * OK
   */
  200: Array<WithCount>;
};

export type ListAthleteRoutesResponse =
  ListAthleteRoutesResponses[keyof ListAthleteRoutesResponses];

export type GetAthleteProfileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/profile";
};

export type GetAthleteProfileResponses = {
  /**
   * OK
   */
  200: AthleteProfile;
};

export type GetAthleteProfileResponse =
  GetAthleteProfileResponses[keyof GetAthleteProfileResponses];

export type GetPowerHrCurveData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Starting local date (ISO-8601)
     */
    start: string;
    /**
     * Ending local date (ISO-8601), inclusive
     */
    end: string;
  };
  url: "/api/v1/athlete/{id}/power-hr-curve";
};

export type GetPowerHrCurveResponses = {
  /**
   * OK
   */
  200: PowerHrCurve;
};

export type GetPowerHrCurveResponse =
  GetPowerHrCurveResponses[keyof GetPowerHrCurveResponses];

export type ListAthletePowerCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    newest?: string;
    /**
     * Comma separated list of curves to return (default last year)
     */
    curves?: Array<string>;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included
     */
    type:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
    includeRanks?: boolean;
    subMaxEfforts?: number;
    /**
     * Current local date (ISO-8601)
     */
    now?: string;
    pmType?: "MS_2P" | "MORTON_3P" | "FFT_CURVES" | "ECP";
    /**
     * Only consider activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f1: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f2: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f3: Array<ActivityFilter>;
  };
  url: "/api/v1/athlete/{id}/power-curves{ext}";
};

export type ListAthletePowerCurvesResponses = {
  /**
   * OK
   */
  200: DataCurveSetPowerCurve;
};

export type ListAthletePowerCurvesResponse =
  ListAthletePowerCurvesResponses[keyof ListAthletePowerCurvesResponses];

export type ListAthletePaceCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    newest?: string;
    /**
     * Comma separated list of curves to return (default last year)
     */
    curves?: Array<string>;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included
     */
    type?:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
    includeRanks?: boolean;
    subMaxEfforts?: number;
    /**
     * Current local date (ISO-8601)
     */
    now?: string;
    /**
     * Return gradient adjusted pace curves
     */
    gap?: boolean;
    pmType?: "CS";
    /**
     * Only consider activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f1: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f2: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f3: Array<ActivityFilter>;
  };
  url: "/api/v1/athlete/{id}/pace-curves{ext}";
};

export type ListAthletePaceCurvesResponses = {
  /**
   * OK
   */
  200: DataCurveSetPaceCurve;
};

export type ListAthletePaceCurvesResponse =
  ListAthletePaceCurvesResponses[keyof ListAthletePaceCurvesResponses];

export type GetAthleteMmpModelData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    type:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
  };
  url: "/api/v1/athlete/{id}/mmp-model";
};

export type GetAthleteMmpModelResponses = {
  /**
   * OK
   */
  200: PowerModel;
};

export type GetAthleteMmpModelResponse =
  GetAthleteMmpModelResponses[keyof GetAthleteMmpModelResponses];

export type ListAthleteHrCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    newest?: string;
    /**
     * Comma separated list of curves to return (default last year)
     */
    curves?: Array<string>;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included
     */
    type?:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
    subMaxEfforts?: number;
    /**
     * Current local date (ISO-8601)
     */
    now?: string;
    /**
     * Only consider activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f1: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f2: Array<ActivityFilter>;
    /**
     * If set each curve is returned with these filters applied to compare curves
     */
    f3: Array<ActivityFilter>;
  };
  url: "/api/v1/athlete/{id}/hr-curves{ext}";
};

export type ListAthleteHrCurvesResponses = {
  /**
   * OK
   */
  200: DataCurveSetHrCurve;
};

export type ListAthleteHrCurvesResponse =
  ListAthleteHrCurvesResponses[keyof ListAthleteHrCurvesResponses];

export type ListGearData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear{ext}";
};

export type ListGearResponses = {
  /**
   * OK
   */
  200: Array<Gear>;
};

export type ListGearResponse = ListGearResponses[keyof ListGearResponses];

export type CalcDistanceEtcData = {
  body?: never;
  path: {
    id: string;
    gearId: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/gear/{gearId}/calc";
};

export type CalcDistanceEtcResponses = {
  /**
   * OK
   */
  200: GearStats;
};

export type CalcDistanceEtcResponse =
  CalcDistanceEtcResponses[keyof CalcDistanceEtcResponses];

export type ListFitnessModelEventsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/fitness-model-events";
};

export type ListFitnessModelEventsResponses = {
  /**
   * OK
   */
  200: Array<Event>;
};

export type ListFitnessModelEventsResponse =
  ListFitnessModelEventsResponses[keyof ListFitnessModelEventsResponses];

export type DownloadWorkout1Data = {
  body?: never;
  path: {
    id: string;
    eventId: number;
    ext: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/events/{eventId}/download{ext}";
};

export type DownloadWorkout1Responses = {
  /**
   * OK
   */
  200: unknown;
};

export type ListTags1Data = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/event-tags";
};

export type ListTags1Responses = {
  /**
   * OK
   */
  200: Array<string>;
};

export type ListTags1Response = ListTags1Responses[keyof ListTags1Responses];

export type GetAthleteSummaryData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    /**
     * Local date and optional time (ISO-8601) for oldest data to return, default is 6 days ago
     */
    start?: string;
    /**
     * Local date and optional time (ISO-8601) for newest data to return, default is today
     */
    end?: string;
    /**
     * Optional list of athlete tags, only athletes with one of these tags are returned
     */
    tags?: Array<string>;
  };
  url: "/api/v1/athlete/{id}/athlete-summary{ext}";
};

export type GetAthleteSummaryResponses = {
  /**
   * OK
   */
  200: Array<SummaryWithCats>;
};

export type GetAthleteSummaryResponse =
  GetAthleteSummaryResponses[keyof GetAthleteSummaryResponses];

export type ListTags2Data = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/activity-tags";
};

export type ListTags2Responses = {
  /**
   * OK
   */
  200: Array<string>;
};

export type ListTags2Response = ListTags2Responses[keyof ListTags2Responses];

export type ListActivityPowerCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    /**
     * Local ISO-8601 date or date and time e.g. 2019-07-22T16:18:49 or 2019-07-22
     */
    oldest: string;
    /**
     * Local ISO-8601 date or date and time (inclusive)
     */
    newest: string;
    /**
     * Only return activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * Optional durations to return (default is all, in seconds comma separated)
     */
    secs?: Array<number>;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included. Required if fatigue is used
     */
    type?:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
    /**
     * Use kj0 or kj1 to get one of the athlete's predefined fatigued power curves
     */
    fatigue?: string;
  };
  url: "/api/v1/athlete/{id}/activity-power-curves{ext}";
};

export type ListActivityPowerCurvesResponses = {
  /**
   * OK
   */
  200: ActivityPowerCurvePayload;
};

export type ListActivityPowerCurvesResponse =
  ListActivityPowerCurvesResponses[keyof ListActivityPowerCurvesResponses];

export type ListActivityPaceCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    /**
     * Local ISO-8601 date or date and time e.g. 2019-07-22T16:18:49 or 2019-07-22
     */
    oldest: string;
    /**
     * Local ISO-8601 date or date and time (inclusive)
     */
    newest: string;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included
     */
    type?:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
    /**
     * Only return activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * Distances required (in meters, comma separated)
     */
    distances?: Array<number>;
    /**
     * Return gradient adjusted pace curves
     */
    gap?: boolean;
  };
  url: "/api/v1/athlete/{id}/activity-pace-curves{ext}";
};

export type ListActivityPaceCurvesResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ListActivityHrCurvesData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query: {
    /**
     * Local ISO-8601 date or date and time e.g. 2019-07-22T16:18:49 or 2019-07-22
     */
    oldest: string;
    /**
     * Local ISO-8601 date or date and time (inclusive)
     */
    newest: string;
    /**
     * Only return activities matching all the filters in this list
     */
    filters?: Array<ActivityFilter>;
    /**
     * Optional durations to return (default is all, in seconds comma separated)
     */
    secs?: Array<number>;
    /**
     * The sport (Ride, Run etc.). If filters is not provided or is blank or does not contain a type filter then activities for the types of the sport matching this parameter are included
     */
    type?:
      | "Ride"
      | "Run"
      | "Swim"
      | "WeightTraining"
      | "Hike"
      | "Walk"
      | "AlpineSki"
      | "BackcountrySki"
      | "Badminton"
      | "Canoeing"
      | "Crossfit"
      | "EBikeRide"
      | "EMountainBikeRide"
      | "Elliptical"
      | "Golf"
      | "GravelRide"
      | "TrackRide"
      | "Handcycle"
      | "HighIntensityIntervalTraining"
      | "Hockey"
      | "IceSkate"
      | "InlineSkate"
      | "Kayaking"
      | "Kitesurf"
      | "MountainBikeRide"
      | "NordicSki"
      | "OpenWaterSwim"
      | "Padel"
      | "Pilates"
      | "Pickleball"
      | "Racquetball"
      | "Rugby"
      | "RockClimbing"
      | "RollerSki"
      | "Rowing"
      | "Sail"
      | "Skateboard"
      | "Snowboard"
      | "Snowshoe"
      | "Soccer"
      | "Squash"
      | "StairStepper"
      | "StandUpPaddling"
      | "Surfing"
      | "TableTennis"
      | "Tennis"
      | "TrailRun"
      | "Transition"
      | "Velomobile"
      | "VirtualRide"
      | "VirtualRow"
      | "VirtualRun"
      | "WaterSport"
      | "Wheelchair"
      | "Windsurf"
      | "Workout"
      | "Yoga"
      | "Other";
  };
  url: "/api/v1/athlete/{id}/activity-hr-curves{ext}";
};

export type ListActivityHrCurvesResponses = {
  /**
   * OK
   */
  200: ActivityHrCurvePayload;
};

export type ListActivityHrCurvesResponse =
  ListActivityHrCurvesResponses[keyof ListActivityHrCurvesResponses];

export type SearchForActivitiesFullData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Search query, case insensitive name search or exact tag search if it starts with #
     */
    q: string;
    limit?: number;
  };
  url: "/api/v1/athlete/{id}/activities/search-full";
};

export type SearchForActivitiesFullResponses = {
  /**
   * OK
   */
  200: Array<Activity>;
};

export type SearchForActivitiesFullResponse =
  SearchForActivitiesFullResponses[keyof SearchForActivitiesFullResponses];

export type SearchForActivitiesData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Search query, case insensitive name search or exact tag search if it starts with #
     */
    q: string;
    limit?: number;
  };
  url: "/api/v1/athlete/{id}/activities/search";
};

export type SearchForActivitiesResponses = {
  /**
   * OK
   */
  200: Array<ActivitySearchResult>;
};

export type SearchForActivitiesResponse =
  SearchForActivitiesResponses[keyof SearchForActivitiesResponses];

export type SearchForIntervalsData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Min time in seconds
     */
    minSecs: number;
    /**
     * Max time in seconds
     */
    maxSecs: number;
    /**
     * Min intensity percentage
     */
    minIntensity: number;
    /**
     * Max intensity percentage
     */
    maxIntensity: number;
    /**
     * Interval type
     */
    type?: "AUTO" | "POWER" | "HR" | "PACE";
    /**
     * Min number of intervals that need to match
     */
    minReps?: number;
    /**
     * Max number of intervals that need to match
     */
    maxReps?: number;
    /**
     * Max results to return
     */
    limit?: number;
  };
  url: "/api/v1/athlete/{id}/activities/interval-search";
};

export type SearchForIntervalsResponses = {
  /**
   * OK
   */
  200: Array<Activity>;
};

export type SearchForIntervalsResponse =
  SearchForIntervalsResponses[keyof SearchForIntervalsResponses];

export type DownloadActivitiesAsCsvData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{id}/activities.csv";
};

export type DownloadActivitiesAsCsvResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ListActivitiesAroundData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * The activity at the center (not returned in the data set)
     */
    activity_id: string;
    /**
     * Only return activities on this route (activityId must have this route_id)
     */
    route_id?: bigint;
    /**
     * Return at most this many activities (default 30)
     */
    limit?: number;
  };
  url: "/api/v1/athlete/{id}/activities-around";
};

export type ListActivitiesAroundResponses = {
  /**
   * OK
   */
  200: Array<Activity>;
};

export type ListActivitiesAroundResponse =
  ListActivitiesAroundResponses[keyof ListActivitiesAroundResponses];

export type ListPaceDistancesForSportData = {
  body?: never;
  path: {
    athleteId: string;
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/pace_distances";
};

export type ListPaceDistancesForSportResponses = {
  /**
   * OK
   */
  200: PaceDistancesDto;
};

export type ListPaceDistancesForSportResponse =
  ListPaceDistancesForSportResponses[keyof ListPaceDistancesForSportResponses];

export type ListMatchingActivitiesData = {
  body?: never;
  path: {
    athleteId: string;
    id: string;
  };
  query?: never;
  url: "/api/v1/athlete/{athleteId}/sport-settings/{id}/matching-activities";
};

export type ListMatchingActivitiesResponses = {
  /**
   * OK
   */
  200: Array<ActivityMini>;
};

export type ListMatchingActivitiesResponse =
  ListMatchingActivitiesResponses[keyof ListMatchingActivitiesResponses];

export type GetActivitiesData = {
  body?: never;
  path: {
    athleteId: string;
    ids: Array<string>;
  };
  query?: {
    /**
     * Include interval data (icu_intervals and icu_groups fields)
     */
    intervals?: boolean;
  };
  url: "/api/v1/athlete/{athleteId}/activities/{ids}";
};

export type GetActivitiesResponses = {
  /**
   * OK
   */
  200: Array<Activity>;
};

export type GetActivitiesResponse =
  GetActivitiesResponses[keyof GetActivitiesResponses];

export type GetActivityWeatherSummaryData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Optional index of first point in activity to use
     */
    start_index?: number;
    /**
     * Optional index of last point in activity to use (exclusive)
     */
    end_index?: number;
  };
  url: "/api/v1/activity/{id}/weather-summary";
};

export type GetActivityWeatherSummaryResponses = {
  /**
   * OK
   */
  200: ActivityWeatherSummary;
};

export type GetActivityWeatherSummaryResponse =
  GetActivityWeatherSummaryResponses[keyof GetActivityWeatherSummaryResponses];

export type GetTimeAtHrData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/time-at-hr";
};

export type GetTimeAtHrResponses = {
  /**
   * OK
   */
  200: Plot;
};

export type GetTimeAtHrResponse =
  GetTimeAtHrResponses[keyof GetTimeAtHrResponses];

export type GetActivityStreamsData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    /**
     * Streams required
     */
    types?: Array<string>;
  };
  url: "/api/v1/activity/{id}/streams{ext}";
};

export type GetActivityStreamsResponses = {
  /**
   * OK
   */
  200: Array<ActivityStream>;
};

export type GetActivityStreamsResponse =
  GetActivityStreamsResponses[keyof GetActivityStreamsResponses];

export type GetActivitySegmentsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/segments";
};

export type GetActivitySegmentsResponses = {
  /**
   * OK
   */
  200: Array<IcuSegment>;
};

export type GetActivitySegmentsResponse =
  GetActivitySegmentsResponses[keyof GetActivitySegmentsResponses];

export type GetPowerVsHrData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/power-vs-hr{ext}";
};

export type GetPowerVsHrResponses = {
  /**
   * OK
   */
  200: PowerVsHrPlot;
};

export type GetPowerVsHrResponse =
  GetPowerVsHrResponses[keyof GetPowerVsHrResponses];

export type GetActivityPowerSpikeModelData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/power-spike-model";
};

export type GetActivityPowerSpikeModelResponses = {
  /**
   * OK
   */
  200: PowerModel;
};

export type GetActivityPowerSpikeModelResponse =
  GetActivityPowerSpikeModelResponses[keyof GetActivityPowerSpikeModelResponses];

export type GetPowerHistogramData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Watts per bucket (default 25)
     */
    bucketSize?: number;
  };
  url: "/api/v1/activity/{id}/power-histogram";
};

export type GetPowerHistogramResponses = {
  /**
   * OK
   */
  200: Array<Bucket>;
};

export type GetPowerHistogramResponse =
  GetPowerHistogramResponses[keyof GetPowerHistogramResponses];

export type GetActivityPowerCurveData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    /**
     * Use kj0 or kj1 to get one of the athlete's predefined fatigued power curves
     */
    fatigue?: string;
  };
  url: "/api/v1/activity/{id}/power-curve{ext}";
};

export type GetActivityPowerCurveResponses = {
  /**
   * OK
   */
  200: PowerCurve;
};

export type GetActivityPowerCurveResponse =
  GetActivityPowerCurveResponses[keyof GetActivityPowerCurveResponses];

export type ListActivityPowerCurves1Data = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    /**
     * Comma separated list of streams required (default is watts)
     */
    types?: Array<string>;
    /**
     * Comma separated list of normal, kj0 or kj1 to return normal and/or fatigued curves
     */
    fatigue?: Array<string>;
  };
  url: "/api/v1/activity/{id}/power-curves{ext}";
};

export type ListActivityPowerCurves1Responses = {
  /**
   * OK
   */
  200: Array<PowerCurve>;
};

export type ListActivityPowerCurves1Response =
  ListActivityPowerCurves1Responses[keyof ListActivityPowerCurves1Responses];

export type GetPaceHistogramData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/pace-histogram";
};

export type GetPaceHistogramResponses = {
  /**
   * OK
   */
  200: Array<Bucket>;
};

export type GetPaceHistogramResponse =
  GetPaceHistogramResponses[keyof GetPaceHistogramResponses];

export type GetActivityPaceCurveData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: {
    gap?: boolean;
  };
  url: "/api/v1/activity/{id}/pace-curve{ext}";
};

export type GetActivityPaceCurveResponses = {
  /**
   * OK
   */
  200: PaceCurve;
};

export type GetActivityPaceCurveResponse =
  GetActivityPaceCurveResponses[keyof GetActivityPaceCurveResponses];

export type GetActivityMapData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Optional comma separated bounding box (left, top, right, bottom) to limit points returned
     */
    bounds?: Array<number>;
    /**
     * Only return the map bounds, not the latlngs
     */
    boundsOnly?: boolean;
    /**
     * Include weather points if available
     */
    weather?: boolean;
  };
  url: "/api/v1/activity/{id}/map";
};

export type GetActivityMapResponses = {
  /**
   * OK
   */
  200: MapData;
};

export type GetActivityMapResponse =
  GetActivityMapResponses[keyof GetActivityMapResponses];

export type GetIntervalStatsData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    start_index: number;
    end_index: number;
  };
  url: "/api/v1/activity/{id}/interval-stats";
};

export type GetIntervalStatsResponses = {
  /**
   * OK
   */
  200: Interval;
};

export type GetIntervalStatsResponse =
  GetIntervalStatsResponses[keyof GetIntervalStatsResponses];

export type GetHrTrainingLoadModelData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/hr-load-model";
};

export type GetHrTrainingLoadModelResponses = {
  /**
   * OK
   */
  200: HrLoadModel;
};

export type GetHrTrainingLoadModelResponse =
  GetHrTrainingLoadModelResponses[keyof GetHrTrainingLoadModelResponses];

export type GetHrHistogramData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Beats per bucket (default 5)
     */
    bucketSize?: number;
  };
  url: "/api/v1/activity/{id}/hr-histogram";
};

export type GetHrHistogramResponses = {
  /**
   * OK
   */
  200: Array<Bucket>;
};

export type GetHrHistogramResponse =
  GetHrHistogramResponses[keyof GetHrHistogramResponses];

export type GetActivityHrCurveData = {
  body?: never;
  path: {
    id: string;
    ext: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/hr-curve{ext}";
};

export type GetActivityHrCurveResponses = {
  /**
   * OK
   */
  200: HrCurve;
};

export type GetActivityHrCurveResponse =
  GetActivityHrCurveResponses[keyof GetActivityHrCurveResponses];

export type DownloadActivityGpxFileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Include power data
     */
    power?: boolean;
    /**
     * Include heart rate data
     */
    hr?: boolean;
  };
  url: "/api/v1/activity/{id}/gpx-file";
};

export type DownloadActivityGpxFileResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetGapHistogramData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/gap-histogram";
};

export type GetGapHistogramResponses = {
  /**
   * OK
   */
  200: Array<Bucket>;
};

export type GetGapHistogramResponse =
  GetGapHistogramResponses[keyof GetGapHistogramResponses];

export type DownloadActivityFitFileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * Include power data
     */
    power?: boolean;
    /**
     * Include heart rate data
     */
    hr?: boolean;
  };
  url: "/api/v1/activity/{id}/fit-file";
};

export type DownloadActivityFitFileResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type DownloadActivityFileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/activity/{id}/file";
};

export type DownloadActivityFileResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type FindBestEffortsData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    /**
     * Stream to search
     */
    stream: string;
    /**
     * Duration of each effort in seconds
     */
    duration?: number;
    /**
     * Distance of each effort in meters
     */
    distance?: number;
    /**
     * Number of efforts to return
     */
    count?: number;
    /**
     * Minimum average value for each interval, intervals will expand if specified
     */
    minValue?: number;
    /**
     * If true portions of the stream that are included in work intervals are not considered
     */
    excludeIntervals?: boolean;
    /**
     * First point in stream to consider
     */
    startIndex?: number;
    /**
     * Last point in stream to consider (exclusive, default is whole stream)
     */
    endIndex?: number;
  };
  url: "/api/v1/activity/{id}/best-efforts";
};

export type FindBestEffortsResponses = {
  /**
   * OK
   */
  200: BestEfforts;
};

export type FindBestEffortsResponse =
  FindBestEffortsResponses[keyof FindBestEffortsResponses];

export type ListEventsData = {
  body?: never;
  path: {
    id: string;
    format: string;
  };
  query?: {
    /**
     * Local date (ISO-8601) for oldest event to return, default is today in the athletes timezone
     */
    oldest?: string;
    /**
     * Local date (ISO-8601) for newest event to return (inclusive), default is oldest plus 6 days
     */
    newest?: string;
    /**
     * Comma separated list of categories to filter for (e.g. WORKOUT,NOTES)
     */
    category?: Array<string>;
    /**
     * Max number of events to return (default is all events)
     */
    limit?: number;
    calendar_id?: number;
    /**
     * Convert workouts to this format (zwo, mrc, erg or fit) and add workout_filename and workout_file_base64 to workout object
     */
    ext?: string;
    /**
     * Percentage used to convert fixed power targets into a range for outdoor workouts only (default is 2.5 or whatever is configured in the Garmin box in /settings)
     */
    powerRange?: number;
    /**
     * Percentage used to convert fixed HR targets into a range (default is 1.5 or whatever is configured in the Garmin box in /settings)
     */
    hrRange?: number;
    /**
     * Percentage used to convert fixed pace targets into a range (default is 2.5 or whatever is configured in the Garmin box in /settings)
     */
    paceRange?: number;
    /**
     * Locale (en, es, de etc.) to use for workouts with steps in multiple languages
     */
    locale?: string;
    /**
     * Resolve power, heart rate and pace targets to watts, bpm and m/s respectively
     */
    resolve?: boolean;
  };
  url: "/api/v1/athlete/{id}/events{format}";
};

export type ListEventsResponses = {
  /**
   * OK
   */
  200: Array<Event>;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type DisconnectAppData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/disconnect-app";
};

export type DisconnectAppErrors = {
  /**
   * Missing or invalid access token
   */
  401: unknown;
};

export type DisconnectAppResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type ClientOptions = {
  baseURL: "https://intervals.icu" | (string & {});
};
